{
  "address": "0x961D756545D36fA862B3c45b20c49a967122650D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "addr",
          "type": "bytes"
        }
      ],
      "name": "InvalidAddressFormat",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotImplemented",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f63232a282ea24bfca96e6ca5f512a7f816134c5b0e3b3e805c85dcff7d44bf",
  "receipt": {
    "to": null,
    "from": "0xb769BEFa05c7D9B08062630E351e865d3F49c56D",
    "contractAddress": "0x961D756545D36fA862B3c45b20c49a967122650D",
    "transactionIndex": 0,
    "gasUsed": "1178309",
    "logsBloom": "0x
    "blockHash": "0x602d4d6b68f5df0d219879eb4e0375ed56db92673462e10066a01f8d2798ea74",
    "transactionHash": "0x2f63232a282ea24bfca96e6ca5f512a7f816134c5b0e3b3e805c85dcff7d44bf",
    "logs": [],
    "blockNumber": 345372,
    "cumulativeGasUsed": "1178309",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a1e1d5b66dfd83a1d0fa11e304175e2f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"addr\",\"type\":\"bytes\"}],\"name\":\"InvalidAddressFormat\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotImplemented\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Resolves names on ENS by interpreting record data stored in a DNS TXT record.      This resolver implements the IExtendedDNSResolver interface, meaning that when      a DNS name specifies it as the resolver via a TXT record, this resolver's      resolve() method is invoked, and is passed any additional information from that      text record. This resolver implements a simple text parser allowing a variety      of records to be specified in text, which will then be used to resolve the name      in ENS.      To use this, set a TXT record on your DNS name in the following format:          ENS1 <address or name of ExtendedDNSResolver> <record data>      For example:          ENS1 2.dnsname.ens.eth a[60]=0x1234...      The record data consists of a series of key=value pairs, separated by spaces. Keys      may have an optional argument in square brackets, and values may be either unquoted       - in which case they may not contain spaces - or single-quoted. Single quotes in      a quoted value may be backslash-escaped.                                       \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510                                       \\u2502 \\u250c\\u2500\\u2500\\u2500\\u2510  \\u2502        \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2524\\\" \\\"\\u2502\\u25c4\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510        \\u2502                                \\u2514\\u2500\\u2500\\u2500\\u2518                                           \\u2502        \\u2502  \\u250c\\u2500\\u2500\\u2500\\u2510    \\u250c\\u2500\\u2500\\u2500\\u2510    \\u250c\\u2500\\u2500\\u2500\\u2510    \\u250c\\u2500\\u2500\\u2500\\u2510    \\u250c\\u2500\\u2500\\u2500\\u2510    \\u250c\\u2500\\u2500\\u2500\\u2510    \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510    \\u250c\\u2500\\u2500\\u2500\\u2510 \\u2502      ^\\u2500\\u2534\\u2500\\u25ba\\u2502key\\u251c\\u2500\\u252c\\u2500\\u25ba\\u2502\\\"[\\\"\\u251c\\u2500\\u2500\\u2500\\u25ba\\u2502arg\\u251c\\u2500\\u2500\\u2500\\u25ba\\u2502\\\"]\\\"\\u251c\\u2500\\u252c\\u2500\\u25ba\\u2502\\\"=\\\"\\u251c\\u2500\\u252c\\u2500\\u25ba\\u2502\\\"'\\\"\\u251c\\u2500\\u2500\\u2500\\u25ba\\u2502quoted_value\\u251c\\u2500\\u2500\\u2500\\u25ba\\u2502\\\"'\\\"\\u251c\\u2500\\u253c\\u2500$           \\u2514\\u2500\\u2500\\u2500\\u2518 \\u2502  \\u2514\\u2500\\u2500\\u2500\\u2518    \\u2514\\u2500\\u2500\\u2500\\u2518    \\u2514\\u2500\\u2500\\u2500\\u2518 \\u2502  \\u2514\\u2500\\u2500\\u2500\\u2518 \\u2502  \\u2514\\u2500\\u2500\\u2500\\u2518    \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518    \\u2514\\u2500\\u2500\\u2500\\u2518 \\u2502                 \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518        \\u2502          \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510         \\u2502                                                     \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u25ba\\u2502unquoted_value\\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518                                                                \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518      Record types:       - a[<coinType>] - Specifies how an `addr()` request should be resolved for the specified         `coinType`. Ethereum has `coinType` 60. The value must be 0x-prefixed hexadecimal, and will         be returned unmodified; this means that non-EVM addresses will need to be translated         into binary format and then encoded in hex.         Examples:          - a[60]=0xFe89cc7aBB2C4183683ab71653C4cdc9B02D44b7          - a[0]=0x00149010587f8364b964fcaa70687216b53bd2cbd798       - a[e<chainId>] - Specifies how an `addr()` request should be resolved for the specified         `chainId`. The value must be 0x-prefixed hexadecimal. When encoding an address for an         EVM-based cryptocurrency that uses a chainId instead of a coinType, this syntax *must*         be used in place of the coin type - eg, Optimism is `a[e10]`, not `a[2147483658]`.         A list of supported cryptocurrencies for both syntaxes can be found here:           https://github.com/ensdomains/address-encoder/blob/master/docs/supported-cryptocurrencies.md         Example:          - a[e10]=0xFe89cc7aBB2C4183683ab71653C4cdc9B02D44b7       - t[<key>] - Specifies how a `text()` request should be resolved for the specified `key`.         Examples:          - t[com.twitter]=nicksdjohnson          - t[url]='https://ens.domains/'          - t[note]='I\\\\'m great'\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/profiles/ExtendedDNSResolver.sol\":\"ExtendedDNSResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ExtendedDNSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../../resolvers/profiles/IExtendedDNSResolver.sol\\\";\\nimport \\\"../../resolvers/profiles/IAddressResolver.sol\\\";\\nimport \\\"../../resolvers/profiles/IAddrResolver.sol\\\";\\nimport \\\"../../resolvers/profiles/ITextResolver.sol\\\";\\nimport \\\"../../utils/HexUtils.sol\\\";\\nimport \\\"../../utils/BytesUtils.sol\\\";\\n\\n/// @dev Resolves names on ENS by interpreting record data stored in a DNS TXT record.\\n///      This resolver implements the IExtendedDNSResolver interface, meaning that when\\n///      a DNS name specifies it as the resolver via a TXT record, this resolver's\\n///      resolve() method is invoked, and is passed any additional information from that\\n///      text record. This resolver implements a simple text parser allowing a variety\\n///      of records to be specified in text, which will then be used to resolve the name\\n///      in ENS.\\n///\\n///      To use this, set a TXT record on your DNS name in the following format:\\n///          ENS1 <address or name of ExtendedDNSResolver> <record data>\\n///\\n///      For example:\\n///          ENS1 2.dnsname.ens.eth a[60]=0x1234...\\n///\\n///      The record data consists of a series of key=value pairs, separated by spaces. Keys\\n///      may have an optional argument in square brackets, and values may be either unquoted\\n///       - in which case they may not contain spaces - or single-quoted. Single quotes in\\n///      a quoted value may be backslash-escaped.\\n///\\n///\\n///                                       \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n///                                       \\u2502 \\u250c\\u2500\\u2500\\u2500\\u2510  \\u2502\\n///        \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2524\\\" \\\"\\u2502\\u25c4\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n///        \\u2502                                \\u2514\\u2500\\u2500\\u2500\\u2518                                           \\u2502\\n///        \\u2502  \\u250c\\u2500\\u2500\\u2500\\u2510    \\u250c\\u2500\\u2500\\u2500\\u2510    \\u250c\\u2500\\u2500\\u2500\\u2510    \\u250c\\u2500\\u2500\\u2500\\u2510    \\u250c\\u2500\\u2500\\u2500\\u2510    \\u250c\\u2500\\u2500\\u2500\\u2510    \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510    \\u250c\\u2500\\u2500\\u2500\\u2510 \\u2502\\n///      ^\\u2500\\u2534\\u2500\\u25ba\\u2502key\\u251c\\u2500\\u252c\\u2500\\u25ba\\u2502\\\"[\\\"\\u251c\\u2500\\u2500\\u2500\\u25ba\\u2502arg\\u251c\\u2500\\u2500\\u2500\\u25ba\\u2502\\\"]\\\"\\u251c\\u2500\\u252c\\u2500\\u25ba\\u2502\\\"=\\\"\\u251c\\u2500\\u252c\\u2500\\u25ba\\u2502\\\"'\\\"\\u251c\\u2500\\u2500\\u2500\\u25ba\\u2502quoted_value\\u251c\\u2500\\u2500\\u2500\\u25ba\\u2502\\\"'\\\"\\u251c\\u2500\\u253c\\u2500$\\n///           \\u2514\\u2500\\u2500\\u2500\\u2518 \\u2502  \\u2514\\u2500\\u2500\\u2500\\u2518    \\u2514\\u2500\\u2500\\u2500\\u2518    \\u2514\\u2500\\u2500\\u2500\\u2518 \\u2502  \\u2514\\u2500\\u2500\\u2500\\u2518 \\u2502  \\u2514\\u2500\\u2500\\u2500\\u2518    \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518    \\u2514\\u2500\\u2500\\u2500\\u2518 \\u2502\\n///                 \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518        \\u2502          \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510         \\u2502\\n///                                                     \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u25ba\\u2502unquoted_value\\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n///                                                                \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n///\\n///      Record types:\\n///       - a[<coinType>] - Specifies how an `addr()` request should be resolved for the specified\\n///         `coinType`. Ethereum has `coinType` 60. The value must be 0x-prefixed hexadecimal, and will\\n///         be returned unmodified; this means that non-EVM addresses will need to be translated\\n///         into binary format and then encoded in hex.\\n///         Examples:\\n///          - a[60]=0xFe89cc7aBB2C4183683ab71653C4cdc9B02D44b7\\n///          - a[0]=0x00149010587f8364b964fcaa70687216b53bd2cbd798\\n///       - a[e<chainId>] - Specifies how an `addr()` request should be resolved for the specified\\n///         `chainId`. The value must be 0x-prefixed hexadecimal. When encoding an address for an\\n///         EVM-based cryptocurrency that uses a chainId instead of a coinType, this syntax *must*\\n///         be used in place of the coin type - eg, Optimism is `a[e10]`, not `a[2147483658]`.\\n///         A list of supported cryptocurrencies for both syntaxes can be found here:\\n///           https://github.com/ensdomains/address-encoder/blob/master/docs/supported-cryptocurrencies.md\\n///         Example:\\n///          - a[e10]=0xFe89cc7aBB2C4183683ab71653C4cdc9B02D44b7\\n///       - t[<key>] - Specifies how a `text()` request should be resolved for the specified `key`.\\n///         Examples:\\n///          - t[com.twitter]=nicksdjohnson\\n///          - t[url]='https://ens.domains/'\\n///          - t[note]='I\\\\'m great'\\ncontract ExtendedDNSResolver is IExtendedDNSResolver, IERC165 {\\n    using HexUtils for *;\\n    using BytesUtils for *;\\n    using Strings for *;\\n\\n    uint256 private constant COIN_TYPE_ETH = 60;\\n\\n    error NotImplemented();\\n    error InvalidAddressFormat(bytes addr);\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) external view virtual override returns (bool) {\\n        return interfaceId == type(IExtendedDNSResolver).interfaceId;\\n    }\\n\\n    function resolve(\\n        bytes calldata /* name */,\\n        bytes calldata data,\\n        bytes calldata context\\n    ) external pure override returns (bytes memory) {\\n        bytes4 selector = bytes4(data);\\n        if (selector == IAddrResolver.addr.selector) {\\n            return _resolveAddr(context);\\n        } else if (selector == IAddressResolver.addr.selector) {\\n            return _resolveAddress(data, context);\\n        } else if (selector == ITextResolver.text.selector) {\\n            return _resolveText(data, context);\\n        }\\n        revert NotImplemented();\\n    }\\n\\n    function _resolveAddress(\\n        bytes calldata data,\\n        bytes calldata context\\n    ) internal pure returns (bytes memory) {\\n        (, uint256 coinType) = abi.decode(data[4:], (bytes32, uint256));\\n        bytes memory value;\\n        // Per https://docs.ens.domains/ensip/11#specification\\n        if (coinType & 0x80000000 != 0) {\\n            value = _findValue(\\n                context,\\n                bytes.concat(\\n                    \\\"a[e\\\",\\n                    bytes((coinType & 0x7fffffff).toString()),\\n                    \\\"]=\\\"\\n                )\\n            );\\n        } else {\\n            value = _findValue(\\n                context,\\n                bytes.concat(\\\"a[\\\", bytes(coinType.toString()), \\\"]=\\\")\\n            );\\n        }\\n        if (value.length == 0) {\\n            return value;\\n        }\\n        (address record, bool valid) = value.hexToAddress(2, value.length);\\n        if (!valid) revert InvalidAddressFormat(value);\\n        return abi.encode(record);\\n    }\\n\\n    function _resolveAddr(\\n        bytes calldata context\\n    ) internal pure returns (bytes memory) {\\n        bytes memory value = _findValue(context, \\\"a[60]=\\\");\\n        if (value.length == 0) {\\n            return value;\\n        }\\n        (address record, bool valid) = value.hexToAddress(2, value.length);\\n        if (!valid) revert InvalidAddressFormat(value);\\n        return abi.encode(record);\\n    }\\n\\n    function _resolveText(\\n        bytes calldata data,\\n        bytes calldata context\\n    ) internal pure returns (bytes memory) {\\n        (, string memory key) = abi.decode(data[4:], (bytes32, string));\\n        bytes memory value = _findValue(\\n            context,\\n            bytes.concat(\\\"t[\\\", bytes(key), \\\"]=\\\")\\n        );\\n        return abi.encode(value);\\n    }\\n\\n    uint256 constant STATE_START = 0;\\n    uint256 constant STATE_IGNORED_KEY = 1;\\n    uint256 constant STATE_IGNORED_KEY_ARG = 2;\\n    uint256 constant STATE_VALUE = 3;\\n    uint256 constant STATE_QUOTED_VALUE = 4;\\n    uint256 constant STATE_UNQUOTED_VALUE = 5;\\n    uint256 constant STATE_IGNORED_VALUE = 6;\\n    uint256 constant STATE_IGNORED_QUOTED_VALUE = 7;\\n    uint256 constant STATE_IGNORED_UNQUOTED_VALUE = 8;\\n\\n    /// @dev Implements a DFA to parse the text record, looking for an entry\\n    ///      matching `key`.\\n    /// @param data The text record to parse.\\n    /// @param key The exact key to search for.\\n    /// @return value The value if found, or an empty string if `key` does not exist.\\n    function _findValue(\\n        bytes memory data,\\n        bytes memory key\\n    ) internal pure returns (bytes memory value) {\\n        // Here we use a simple state machine to parse the text record. We\\n        // process characters one at a time; each character can trigger a\\n        // transition to a new state, or terminate the DFA and return a value.\\n        // For states that expect to process a number of tokens, we use\\n        // inner loops for efficiency reasons, to avoid the need to go\\n        // through the outer loop and switch statement for every character.\\n        uint256 state = STATE_START;\\n        uint256 len = data.length;\\n        for (uint256 i = 0; i < len; ) {\\n            if (state == STATE_START) {\\n                // Look for a matching key.\\n                if (data.equals(i, key, 0, key.length)) {\\n                    i += key.length;\\n                    state = STATE_VALUE;\\n                } else {\\n                    state = STATE_IGNORED_KEY;\\n                }\\n            } else if (state == STATE_IGNORED_KEY) {\\n                for (; i < len; i++) {\\n                    if (data[i] == \\\"=\\\") {\\n                        state = STATE_IGNORED_VALUE;\\n                        i += 1;\\n                        break;\\n                    } else if (data[i] == \\\"[\\\") {\\n                        state = STATE_IGNORED_KEY_ARG;\\n                        i += 1;\\n                        break;\\n                    }\\n                }\\n            } else if (state == STATE_IGNORED_KEY_ARG) {\\n                for (; i < len; i++) {\\n                    if (data[i] == \\\"]\\\") {\\n                        state = STATE_IGNORED_VALUE;\\n                        i += 1;\\n                        if (data[i] == \\\"=\\\") {\\n                            i += 1;\\n                        }\\n                        break;\\n                    }\\n                }\\n            } else if (state == STATE_VALUE) {\\n                if (data[i] == \\\"'\\\") {\\n                    state = STATE_QUOTED_VALUE;\\n                    i += 1;\\n                } else {\\n                    state = STATE_UNQUOTED_VALUE;\\n                }\\n            } else if (state == STATE_QUOTED_VALUE) {\\n                uint256 start = i;\\n                uint256 valueLen = 0;\\n                bool escaped = false;\\n                for (; i < len; i++) {\\n                    if (escaped) {\\n                        data[start + valueLen] = data[i];\\n                        valueLen += 1;\\n                        escaped = false;\\n                    } else {\\n                        if (data[i] == \\\"\\\\\\\\\\\") {\\n                            escaped = true;\\n                        } else if (data[i] == \\\"'\\\") {\\n                            return data.substring(start, valueLen);\\n                        } else {\\n                            data[start + valueLen] = data[i];\\n                            valueLen += 1;\\n                        }\\n                    }\\n                }\\n            } else if (state == STATE_UNQUOTED_VALUE) {\\n                uint256 start = i;\\n                for (; i < len; i++) {\\n                    if (data[i] == \\\" \\\") {\\n                        return data.substring(start, i - start);\\n                    }\\n                }\\n                return data.substring(start, len - start);\\n            } else if (state == STATE_IGNORED_VALUE) {\\n                if (data[i] == \\\"'\\\") {\\n                    state = STATE_IGNORED_QUOTED_VALUE;\\n                    i += 1;\\n                } else {\\n                    state = STATE_IGNORED_UNQUOTED_VALUE;\\n                }\\n            } else if (state == STATE_IGNORED_QUOTED_VALUE) {\\n                bool escaped = false;\\n                for (; i < len; i++) {\\n                    if (escaped) {\\n                        escaped = false;\\n                    } else {\\n                        if (data[i] == \\\"\\\\\\\\\\\") {\\n                            escaped = true;\\n                        } else if (data[i] == \\\"'\\\") {\\n                            i += 1;\\n                            while (data[i] == \\\" \\\") {\\n                                i += 1;\\n                            }\\n                            state = STATE_START;\\n                            break;\\n                        }\\n                    }\\n                }\\n            } else {\\n                assert(state == STATE_IGNORED_UNQUOTED_VALUE);\\n                for (; i < len; i++) {\\n                    if (data[i] == \\\" \\\") {\\n                        while (data[i] == \\\" \\\") {\\n                            i += 1;\\n                        }\\n                        state = STATE_START;\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        return \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x7ea651d9823930e5b65165ed4610ff43c94e6dab96398f493c57d7a3d3d39309\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/// Interface for the legacy (ETH-only) addr function.\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /// Returns the address associated with an ENS node.\\n    /// @param node The ENS node to query.\\n    /// @return The associated address.\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x91dd0c350698c505d6c7e4c919da9f981d4b8d7ad062e25073fa1f6af7cb79d1\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/// Interface for the new (multicoin) addr function.\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x8da5dd0fc1c5ab4f47e03c23126976a86d4b2dbeac161e70e3af9e2a13330cf0\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IExtendedDNSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedDNSResolver {\\n    function resolve(\\n        bytes memory name,\\n        bytes memory data,\\n        bytes memory context\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x541f8799c34ff9e7035d09f06ae0f0f8a16b6065e9b60a15670b957321630f72\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    /// Returns the text data associated with an ENS node and key.\\n    /// @param node The ENS node to query.\\n    /// @param key The text data key to query.\\n    /// @return The associated text data.\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe91c15697be2d20417cce3c58d4ecce34796986fdedc97be5b93a823be58e471\",\"license\":\"MIT\"},\"contracts/utils/BytesUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary BytesUtils {\\n    error OffsetOutOfBoundsError(uint256 offset, uint256 length);\\n\\n    /// @dev Returns the keccak-256 hash of a byte range.\\n    /// @param self The byte string to hash.\\n    /// @param offset The position to start hashing at.\\n    /// @param len The number of bytes to hash.\\n    /// @return ret The hash of the byte range.\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /// @dev Returns a positive number if `other` comes lexicographically after\\n    ///      `self`, a negative number if it comes before, or zero if the\\n    ///      contents of the two bytes are equal.\\n    /// @param self The first bytes to compare.\\n    /// @param other The second bytes to compare.\\n    /// @return The result of the comparison.\\n    function compare(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (int256) {\\n        return compare(self, 0, self.length, other, 0, other.length);\\n    }\\n\\n    /// @dev Returns a positive number if `other` comes lexicographically after\\n    ///      `self`, a negative number if it comes before, or zero if the\\n    ///      contents of the two bytes are equal. Comparison is done per-rune,\\n    ///      on unicode codepoints.\\n    /// @param self The first bytes to compare.\\n    /// @param offset The offset of self.\\n    /// @param len    The length of self.\\n    /// @param other The second bytes to compare.\\n    /// @param otheroffset The offset of the other string.\\n    /// @param otherlen    The length of the other string.\\n    /// @return The result of the comparison.\\n    function compare(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len,\\n        bytes memory other,\\n        uint256 otheroffset,\\n        uint256 otherlen\\n    ) internal pure returns (int256) {\\n        if (offset + len > self.length) {\\n            revert OffsetOutOfBoundsError(offset + len, self.length);\\n        }\\n        if (otheroffset + otherlen > other.length) {\\n            revert OffsetOutOfBoundsError(otheroffset + otherlen, other.length);\\n        }\\n\\n        uint256 shortest = len;\\n        if (otherlen < len) shortest = otherlen;\\n\\n        uint256 selfptr;\\n        uint256 otherptr;\\n\\n        assembly {\\n            selfptr := add(self, add(offset, 32))\\n            otherptr := add(other, add(otheroffset, 32))\\n        }\\n        for (uint256 idx = 0; idx < shortest; idx += 32) {\\n            uint256 a;\\n            uint256 b;\\n            assembly {\\n                a := mload(selfptr)\\n                b := mload(otherptr)\\n            }\\n            if (a != b) {\\n                uint256 rest = shortest - idx;\\n                if (rest < 32) {\\n                    // shift out the irrelevant bits\\n                    rest = (32 - rest) << 3; // bits to drop\\n                    a >>= rest;\\n                    b >>= rest;\\n                }\\n                if (a < b) {\\n                    return -1;\\n                } else if (a > b) {\\n                    return 1;\\n                }\\n            }\\n            selfptr += 32;\\n            otherptr += 32;\\n        }\\n\\n        return int256(len) - int256(otherlen);\\n    }\\n\\n    /// @dev Returns true if the two byte ranges are equal.\\n    /// @param self The first byte range to compare.\\n    /// @param offset The offset into the first byte range.\\n    /// @param other The second byte range to compare.\\n    /// @param otherOffset The offset into the second byte range.\\n    /// @param len The number of bytes to compare\\n    /// @return True if the byte ranges are equal, false otherwise.\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset,\\n        uint256 len\\n    ) internal pure returns (bool) {\\n        return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n    }\\n\\n    /// @dev Returns true if the two byte ranges are equal with offsets.\\n    /// @param self The first byte range to compare.\\n    /// @param offset The offset into the first byte range.\\n    /// @param other The second byte range to compare.\\n    /// @param otherOffset The offset into the second byte range.\\n    /// @return True if the byte ranges are equal, false otherwise.\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset\\n    ) internal pure returns (bool) {\\n        return\\n            keccak(self, offset, self.length - offset) ==\\n            keccak(other, otherOffset, other.length - otherOffset);\\n    }\\n\\n    /// @dev Compares a range of 'self' to all of 'other' and returns True iff\\n    ///      they are equal.\\n    /// @param self The first byte range to compare.\\n    /// @param offset The offset into the first byte range.\\n    /// @param other The second byte range to compare.\\n    /// @return True if the byte ranges are equal, false otherwise.\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        return\\n            self.length == offset + other.length &&\\n            equals(self, offset, other, 0, other.length);\\n    }\\n\\n    /// @dev Returns true if the two byte ranges are equal.\\n    /// @param self The first byte range to compare.\\n    /// @param other The second byte range to compare.\\n    /// @return True if the byte ranges are equal, false otherwise.\\n    function equals(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        return\\n            self.length == other.length &&\\n            equals(self, 0, other, 0, self.length);\\n    }\\n\\n    /// @dev Returns the 8-bit number at the specified index of self.\\n    /// @param self The byte string.\\n    /// @param idx The index into the bytes\\n    /// @return ret The specified 8 bits of the string, interpreted as an integer.\\n    function readUint8(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint8 ret) {\\n        return uint8(self[idx]);\\n    }\\n\\n    /// @dev Returns the 16-bit number at the specified index of self.\\n    /// @param self The byte string.\\n    /// @param idx The index into the bytes\\n    /// @return ret The specified 16 bits of the string, interpreted as an integer.\\n    function readUint16(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint16 ret) {\\n        require(idx + 2 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n        }\\n    }\\n\\n    /// @dev Returns the 32-bit number at the specified index of self.\\n    /// @param self The byte string.\\n    /// @param idx The index into the bytes\\n    /// @return ret The specified 32 bits of the string, interpreted as an integer.\\n    function readUint32(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint32 ret) {\\n        require(idx + 4 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n        }\\n    }\\n\\n    /// @dev Returns the 32 byte value at the specified index of self.\\n    /// @param self The byte string.\\n    /// @param idx The index into the bytes\\n    /// @return ret The specified 32 bytes of the string.\\n    function readBytes32(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes32 ret) {\\n        require(idx + 32 <= self.length);\\n        assembly {\\n            ret := mload(add(add(self, 32), idx))\\n        }\\n    }\\n\\n    /// @dev Returns the 32 byte value at the specified index of self.\\n    /// @param self The byte string.\\n    /// @param idx The index into the bytes\\n    /// @return ret The specified 32 bytes of the string.\\n    function readBytes20(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes20 ret) {\\n        require(idx + 20 <= self.length);\\n        assembly {\\n            ret := and(\\n                mload(add(add(self, 32), idx)),\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /// @dev Returns the n byte value at the specified index of self.\\n    /// @param self The byte string.\\n    /// @param idx The index into the bytes.\\n    /// @param len The number of bytes.\\n    /// @return ret The specified 32 bytes of the string.\\n    function readBytesN(\\n        bytes memory self,\\n        uint256 idx,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(len <= 32);\\n        require(idx + len <= self.length);\\n        assembly {\\n            let mask := not(sub(exp(256, sub(32, len)), 1))\\n            ret := and(mload(add(add(self, 32), idx)), mask)\\n        }\\n    }\\n\\n    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint256 mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n\\n    /// @dev Copies a substring into a new byte string.\\n    /// @param self The byte string to copy from.\\n    /// @param offset The offset to start copying at.\\n    /// @param len The number of bytes to copy.\\n    function substring(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes memory) {\\n        require(offset + len <= self.length);\\n\\n        bytes memory ret = new bytes(len);\\n        uint256 dest;\\n        uint256 src;\\n\\n        assembly {\\n            dest := add(ret, 32)\\n            src := add(add(self, 32), offset)\\n        }\\n        memcpy(dest, src, len);\\n\\n        return ret;\\n    }\\n\\n    // Maps characters from 0x30 to 0x7A to their base32 values.\\n    // 0xFF represents invalid characters in that range.\\n    bytes constant base32HexTable =\\n        hex\\\"00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\\\";\\n\\n    /// @dev Decodes unpadded base32 data of up to one word in length.\\n    /// @param self The data to decode.\\n    /// @param off Offset into the string to start at.\\n    /// @param len Number of characters to decode.\\n    /// @return The decoded data, left aligned.\\n    function base32HexDecodeWord(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len\\n    ) internal pure returns (bytes32) {\\n        require(len <= 52);\\n\\n        uint256 ret = 0;\\n        uint8 decoded;\\n        for (uint256 i = 0; i < len; i++) {\\n            bytes1 char = self[off + i];\\n            require(char >= 0x30 && char <= 0x7A);\\n            decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n            require(decoded <= 0x20);\\n            if (i == len - 1) {\\n                break;\\n            }\\n            ret = (ret << 5) | decoded;\\n        }\\n\\n        uint256 bitlen = len * 5;\\n        if (len % 8 == 0) {\\n            // Multiple of 8 characters, no padding\\n            ret = (ret << 5) | decoded;\\n        } else if (len % 8 == 2) {\\n            // Two extra characters - 1 byte\\n            ret = (ret << 3) | (decoded >> 2);\\n            bitlen -= 2;\\n        } else if (len % 8 == 4) {\\n            // Four extra characters - 2 bytes\\n            ret = (ret << 1) | (decoded >> 4);\\n            bitlen -= 4;\\n        } else if (len % 8 == 5) {\\n            // Five extra characters - 3 bytes\\n            ret = (ret << 4) | (decoded >> 1);\\n            bitlen -= 1;\\n        } else if (len % 8 == 7) {\\n            // Seven extra characters - 4 bytes\\n            ret = (ret << 2) | (decoded >> 3);\\n            bitlen -= 3;\\n        } else {\\n            revert();\\n        }\\n\\n        return bytes32(ret << (256 - bitlen));\\n    }\\n\\n    /// @dev Finds the first occurrence of the byte `needle` in `self`.\\n    /// @param self The string to search\\n    /// @param off The offset to start searching at\\n    /// @param len The number of bytes to search\\n    /// @param needle The byte to search for\\n    /// @return The offset of `needle` in `self`, or 2**256-1 if it was not found.\\n    function find(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len,\\n        bytes1 needle\\n    ) internal pure returns (uint256) {\\n        for (uint256 idx = off; idx < off + len; idx++) {\\n            if (self[idx] == needle) {\\n                return idx;\\n            }\\n        }\\n        return type(uint256).max;\\n    }\\n}\\n\",\"keccak256\":\"0x91aa93c6538538518436746a72ed262b677c5216209b7a7f32dbf5f87018ba52\",\"license\":\"MIT\"},\"contracts/utils/HexUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary HexUtils {\\n    /// @dev Attempts to parse bytes32 from a hex string\\n    /// @param str The string to parse\\n    /// @param idx The offset to start parsing at\\n    /// @param lastIdx The (exclusive) last index in `str` to consider. Use `str.length` to scan the whole string.\\n    function hexStringToBytes32(\\n        bytes memory str,\\n        uint256 idx,\\n        uint256 lastIdx\\n    ) internal pure returns (bytes32, bool) {\\n        require(lastIdx - idx <= 64);\\n        (bytes memory r, bool valid) = hexToBytes(str, idx, lastIdx);\\n        if (!valid) {\\n            return (bytes32(0), false);\\n        }\\n        bytes32 ret;\\n        assembly {\\n            ret := shr(mul(4, sub(64, sub(lastIdx, idx))), mload(add(r, 32)))\\n        }\\n        return (ret, true);\\n    }\\n\\n    function hexToBytes(\\n        bytes memory str,\\n        uint256 idx,\\n        uint256 lastIdx\\n    ) internal pure returns (bytes memory r, bool valid) {\\n        uint256 hexLength = lastIdx - idx;\\n        if (hexLength % 2 == 1) {\\n            revert(\\\"Invalid string length\\\");\\n        }\\n        r = new bytes(hexLength / 2);\\n        valid = true;\\n        assembly {\\n            // check that the index to read to is not past the end of the string\\n            if gt(lastIdx, mload(str)) {\\n                revert(0, 0)\\n            }\\n\\n            function getHex(c) -> ascii {\\n                // chars 48-57: 0-9\\n                if and(gt(c, 47), lt(c, 58)) {\\n                    ascii := sub(c, 48)\\n                    leave\\n                }\\n                // chars 65-70: A-F\\n                if and(gt(c, 64), lt(c, 71)) {\\n                    ascii := add(sub(c, 65), 10)\\n                    leave\\n                }\\n                // chars 97-102: a-f\\n                if and(gt(c, 96), lt(c, 103)) {\\n                    ascii := add(sub(c, 97), 10)\\n                    leave\\n                }\\n                // invalid char\\n                ascii := 0xff\\n            }\\n\\n            let ptr := add(str, 32)\\n            for {\\n                let i := idx\\n            } lt(i, lastIdx) {\\n                i := add(i, 2)\\n            } {\\n                let byte1 := getHex(byte(0, mload(add(ptr, i))))\\n                let byte2 := getHex(byte(0, mload(add(ptr, add(i, 1)))))\\n                // if either byte is invalid, set invalid and break loop\\n                if or(eq(byte1, 0xff), eq(byte2, 0xff)) {\\n                    valid := false\\n                    break\\n                }\\n                let combined := or(shl(4, byte1), byte2)\\n                mstore8(add(add(r, 32), div(sub(i, idx), 2)), combined)\\n            }\\n        }\\n    }\\n\\n    /// @dev Attempts to parse an address from a hex string\\n    /// @param str The string to parse\\n    /// @param idx The offset to start parsing at\\n    /// @param lastIdx The (exclusive) last index in `str` to consider. Use `str.length` to scan the whole string.\\n    function hexToAddress(\\n        bytes memory str,\\n        uint256 idx,\\n        uint256 lastIdx\\n    ) internal pure returns (address, bool) {\\n        if (lastIdx - idx < 40) return (address(0x0), false);\\n        (bytes32 r, bool valid) = hexStringToBytes32(str, idx, lastIdx);\\n        return (address(uint160(uint256(r))), valid);\\n    }\\n\\n    /// @dev Format an address as a hex string.\\n    /// @param addr The address to format.\\n    /// @return hexString The corresponding hex string w/o a 0x-prefix.\\n    function addressToHex(\\n        address addr\\n    ) internal pure returns (string memory hexString) {\\n        // return bytesToHex(abi.encodePacked(addr));\\n        hexString = new string(40);\\n        uint256 dst;\\n        assembly {\\n            mstore(0, addr)\\n            dst := add(hexString, 32)\\n        }\\n        unsafeHex(12, dst, 40);\\n    }\\n\\n    /// @dev Format an integer as a variable-length hex string without zero padding.\\n    /// * unpaddedUintToHex(0, true)  = \\\"0\\\"\\n    /// * unpaddedUintToHex(1, true)  = \\\"1\\\"\\n    /// * unpaddedUintToHex(0, false) = \\\"00\\\"\\n    /// * unpaddedUintToHex(1, false) = \\\"01\\\"\\n    /// @param value The number to format.\\n    /// @param dropZeroNibble If true, the leading byte will use one nibble if less than 16.\\n    /// @return hexString The corresponding hex string w/o a 0x-prefix.\\n    function unpaddedUintToHex(\\n        uint256 value,\\n        bool dropZeroNibble\\n    ) internal pure returns (string memory hexString) {\\n        uint256 temp = value;\\n        uint256 shift;\\n        for (uint256 b = 128; b >= 8; b >>= 1) {\\n            if (temp < (1 << b)) {\\n                shift += b; // number of zero upper bits\\n            } else {\\n                temp >>= b; // shift away lower half\\n            }\\n        }\\n        if (dropZeroNibble && temp < 16) shift += 4;\\n        uint256 nibbles = 64 - (shift >> 2);\\n        hexString = new string(nibbles);\\n        uint256 dst;\\n        assembly {\\n            mstore(0, shl(shift, value)) // left-align\\n            dst := add(hexString, 32)\\n        }\\n        unsafeHex(0, dst, nibbles);\\n    }\\n\\n    /// @dev Format bytes as a hex string.\\n    /// @param v The bytes to format.\\n    /// @return hexString The corresponding hex string w/o a 0x-prefix.\\n    function bytesToHex(\\n        bytes memory v\\n    ) internal pure returns (string memory hexString) {\\n        uint256 nibbles = v.length << 1;\\n        hexString = new string(nibbles);\\n        uint256 src;\\n        uint256 dst;\\n        assembly {\\n            src := add(v, 32)\\n            dst := add(hexString, 32)\\n        }\\n        unsafeHex(src, dst, nibbles);\\n    }\\n\\n    /// @dev Converts arbitrary memory to a hex string.\\n    /// @param src The memory offset of first nibble of input.\\n    /// @param dst The memory offset of first hex-char of output.\\n    /// @param nibbles The number of nibbles to convert and the byte-length of the output.\\n    function unsafeHex(\\n        uint256 src,\\n        uint256 dst,\\n        uint256 nibbles\\n    ) internal pure {\\n        unchecked {\\n            for (uint256 end = dst + nibbles; dst < end; src += 32) {\\n                uint256 word;\\n                assembly {\\n                    word := mload(src)\\n                }\\n                for (uint256 shift = 256; dst < end && shift > 0; dst++) {\\n                    uint256 b = (word >> (shift -= 4)) & 15; // each nibble\\n                    b = b < 10 ? b + 0x30 : b + 0x57; // (\\\"a\\\" - 10) => 0x57\\n                    assembly {\\n                        mstore8(dst, b)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdabfeb00a2bdc34233955d2a43ceead3bbbda6198e93889898028e31bea89d69\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061146e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b5780638ef98a7e1461008d575b600080fd5b610078610049366004610fe7565b6001600160e01b0319167f8ef98a7e000000000000000000000000000000000000000000000000000000001490565b60405190151581526020015b60405180910390f35b6100a061009b366004611061565b6100ad565b604051610084919061111f565b606060006100bb8587611152565b90507fc4c4a822000000000000000000000000000000000000000000000000000000006001600160e01b0319821601610100576100f884846101b6565b9150506101ac565b7f0e3481fa000000000000000000000000000000000000000000000000000000006001600160e01b031982160161013d576100f8868686866102c3565b7fa62e2bc4000000000000000000000000000000000000000000000000000000006001600160e01b031982160161017a576100f88686868661044f565b6040517fd623472500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9695505050505050565b6060600061022e84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152600681527f615b36305d3d0000000000000000000000000000000000000000000000000000602082015291506104ea9050565b905080516000036102405790506102bd565b60008061025a6002845185610b039092919063ffffffff16565b91509150806102875782604051630f79e00960e21b815260040161027e919061111f565b60405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff841660208201520160405160208183030381529060405293505050505b92915050565b606060006102d48560048189611182565b8101906102e191906111ac565b9150506060816380000000166000146103685761036185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061033d92505050637fffffff8516610b41565b60405160200161034d91906111ce565b6040516020818303038152906040526104ea565b90506103c0565b6103bd85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103ad9250869150610b419050565b60405160200161034d919061121f565b90505b80516000036103d25791506104479050565b6000806103ec6002845185610b039092919063ffffffff16565b91509150806104105782604051630f79e00960e21b815260040161027e919061111f565b6040805173ffffffffffffffffffffffffffffffffffffffff84166020820152016040516020818303038152906040529450505050505b949350505050565b606060006104608560048189611182565b81019061046d9190611286565b91505060006104bc85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060405161034d9250869150602001611341565b9050806040516020016104cf919061111f565b60405160208183030381529060405292505050949350505050565b8151606090600090815b81811015610aea578261053a57845161051590879083908890600090610be1565b15610531578451610526908261138f565b9050600392506104f4565b600192506104f4565b600183036105f9575b818110156105f45785818151811061055d5761055d6113a2565b01602001516001600160f81b031916603d60f81b0361058c576006925061058560018261138f565b90506104f4565b85818151811061059e5761059e6113a2565b01602001516001600160f81b0319167f5b00000000000000000000000000000000000000000000000000000000000000036105e2576002925061058560018261138f565b806105ec816113b8565b915050610543565b6104f4565b600283036106aa575b818110156105f45785818151811061061c5761061c6113a2565b01602001516001600160f81b0319167f5d0000000000000000000000000000000000000000000000000000000000000003610698576006925061066060018261138f565b9050858181518110610674576106746113a2565b01602001516001600160f81b031916603d60f81b036105f45761058560018261138f565b806106a2816113b8565b915050610602565b600383036106f5578581815181106106c4576106c46113a2565b01602001516001600160f81b031916602760f81b036106ec576004925061058560018261138f565b600592506104f4565b6004830361089a57806000805b8484101561089257801561079157888481518110610722576107226113a2565b01602001516001600160f81b0319168961073c848661138f565b8151811061074c5761074c6113a2565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061078660018361138f565b915060009050610880565b8884815181106107a3576107a36113a2565b01602001516001600160f81b031916601760fa1b036107c457506001610880565b8884815181106107d6576107d66113a2565b01602001516001600160f81b031916602760f81b03610807576107fa898484610c04565b96505050505050506102bd565b888481518110610819576108196113a2565b01602001516001600160f81b03191689610833848661138f565b81518110610843576108436113a2565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061087d60018361138f565b91505b8361088a816113b8565b945050610702565b5050506104f4565b6005830361091857805b8282101561090a578682815181106108be576108be6113a2565b01602001516001600160f81b031916600160fd1b036108f8576108ed816108e581856113d1565b899190610c04565b9450505050506102bd565b81610902816113b8565b9250506108a4565b6108ed816108e581866113d1565b6006830361096357858181518110610932576109326113a2565b01602001516001600160f81b031916602760f81b0361095a576007925061058560018261138f565b600892506104f4565b60078303610a4e5760005b82821015610a4857801561098457506000610a36565b868281518110610996576109966113a2565b01602001516001600160f81b031916601760fa1b036109b757506001610a36565b8682815181106109c9576109c96113a2565b01602001516001600160f81b031916602760f81b03610a36576109ed60018361138f565b91505b868281518110610a0257610a026113a2565b01602001516001600160f81b031916600160fd1b03610a2d57610a2660018361138f565b91506109f0565b60009350610a48565b81610a40816113b8565b92505061096e565b506104f4565b60088314610a5e57610a5e6113e4565b818110156105f457858181518110610a7857610a786113a2565b01602001516001600160f81b031916600160fd1b03610ad8575b858181518110610aa457610aa46113a2565b01602001516001600160f81b031916600160fd1b03610acf57610ac860018261138f565b9050610a92565b600092506104f4565b80610ae2816113b8565b915050610a5e565b5050604080516020810190915260008152949350505050565b6000806028610b1285856113d1565b1015610b2357506000905080610b39565b600080610b31878787610c86565b909450925050505b935093915050565b60606000610b4e83610ce3565b600101905060008167ffffffffffffffff811115610b6e57610b6e611270565b6040519080825280601f01601f191660200182016040528015610b98576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610ba257509392505050565b6000610bee848484610dc5565b610bf9878785610dc5565b149695505050505050565b8251606090610c13838561138f565b1115610c1e57600080fd5b60008267ffffffffffffffff811115610c3957610c39611270565b6040519080825280601f01601f191660200182016040528015610c63576020820181803683370190505b50905060208082019086860101610c7b828287610de9565b509095945050505050565b6000806040610c9585856113d1565b1115610ca057600080fd5b600080610cae878787610e3f565b9150915080610cc6575060009250829150610b399050565b50602001516004858503604003021c915060019050935093915050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610d2c577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610d58576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610d7657662386f26fc10000830492506010015b6305f5e1008310610d8e576305f5e100830492506008015b6127108310610da257612710830492506004015b60648310610db4576064830492506002015b600a83106102bd5760010192915050565b8251600090610dd4838561138f565b1115610ddf57600080fd5b5091016020012090565b60208110610e215781518352610e0060208461138f565b9250610e0d60208361138f565b9150610e1a6020826113d1565b9050610de9565b905182516020929092036101000a6000190180199091169116179052565b6060600080610e4e85856113d1565b9050610e5b600282611410565b600103610ec4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c696420737472696e67206c656e6774680000000000000000000000604482015260640161027e565b610ecf600282611424565b67ffffffffffffffff811115610ee757610ee7611270565b6040519080825280601f01601f191660200182016040528015610f11576020820181803683370190505b509250600191508551841115610f2657600080fd5b610f77565b6000603a8210602f83111615610f435750602f190190565b60478210604083111615610f5957506036190190565b60678210606083111615610f6f57506056190190565b5060ff919050565b60208601855b85811015610fdc57610f948183015160001a610f2b565b610fa66001830184015160001a610f2b565b60ff811460ff83141715610fbf57600095505050610fdc565b60049190911b178060028984030487016020015350600201610f7d565b505050935093915050565b600060208284031215610ff957600080fd5b81356001600160e01b03198116811461101157600080fd5b9392505050565b60008083601f84011261102a57600080fd5b50813567ffffffffffffffff81111561104257600080fd5b60208301915083602082850101111561105a57600080fd5b9250929050565b6000806000806000806060878903121561107a57600080fd5b863567ffffffffffffffff8082111561109257600080fd5b61109e8a838b01611018565b909850965060208901359150808211156110b757600080fd5b6110c38a838b01611018565b909650945060408901359150808211156110dc57600080fd5b506110e989828a01611018565b979a9699509497509295939492505050565b60005b838110156111165781810151838201526020016110fe565b50506000910152565b602081526000825180602084015261113e8160408501602087016110fb565b601f01601f19169190910160400192915050565b6001600160e01b0319813581811691600485101561117a5780818660040360031b1b83161692505b505092915050565b6000808585111561119257600080fd5b8386111561119f57600080fd5b5050820193919092039150565b600080604083850312156111bf57600080fd5b50508035926020909101359150565b7f615b6500000000000000000000000000000000000000000000000000000000008152600082516112068160038501602087016110fb565b615d3d60f01b6003939091019283015250600501919050565b7f615b0000000000000000000000000000000000000000000000000000000000008152600082516112578160028501602087016110fb565b615d3d60f01b6002939091019283015250600401919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561129957600080fd5b82359150602083013567ffffffffffffffff808211156112b857600080fd5b818501915085601f8301126112cc57600080fd5b8135818111156112de576112de611270565b604051601f8201601f19908116603f0116810190838211818310171561130657611306611270565b8160405282815288602084870101111561131f57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b7f745b0000000000000000000000000000000000000000000000000000000000008152600082516112578160028501602087016110fb565b634e487b7160e01b600052601160045260246000fd5b808201808211156102bd576102bd611379565b634e487b7160e01b600052603260045260246000fd5b6000600182016113ca576113ca611379565b5060010190565b818103818111156102bd576102bd611379565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60008261141f5761141f6113fa565b500690565b600082611433576114336113fa565b50049056fea2646970667358221220aa535541b2a0a0c839ad95faffa9e4007dc301d94fa0e1840731936bbd43d5f864736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b5780638ef98a7e1461008d575b600080fd5b610078610049366004610fe7565b6001600160e01b0319167f8ef98a7e000000000000000000000000000000000000000000000000000000001490565b60405190151581526020015b60405180910390f35b6100a061009b366004611061565b6100ad565b604051610084919061111f565b606060006100bb8587611152565b90507fc4c4a822000000000000000000000000000000000000000000000000000000006001600160e01b0319821601610100576100f884846101b6565b9150506101ac565b7f0e3481fa000000000000000000000000000000000000000000000000000000006001600160e01b031982160161013d576100f8868686866102c3565b7fa62e2bc4000000000000000000000000000000000000000000000000000000006001600160e01b031982160161017a576100f88686868661044f565b6040517fd623472500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9695505050505050565b6060600061022e84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152600681527f615b36305d3d0000000000000000000000000000000000000000000000000000602082015291506104ea9050565b905080516000036102405790506102bd565b60008061025a6002845185610b039092919063ffffffff16565b91509150806102875782604051630f79e00960e21b815260040161027e919061111f565b60405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff841660208201520160405160208183030381529060405293505050505b92915050565b606060006102d48560048189611182565b8101906102e191906111ac565b9150506060816380000000166000146103685761036185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061033d92505050637fffffff8516610b41565b60405160200161034d91906111ce565b6040516020818303038152906040526104ea565b90506103c0565b6103bd85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103ad9250869150610b419050565b60405160200161034d919061121f565b90505b80516000036103d25791506104479050565b6000806103ec6002845185610b039092919063ffffffff16565b91509150806104105782604051630f79e00960e21b815260040161027e919061111f565b6040805173ffffffffffffffffffffffffffffffffffffffff84166020820152016040516020818303038152906040529450505050505b949350505050565b606060006104608560048189611182565b81019061046d9190611286565b91505060006104bc85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060405161034d9250869150602001611341565b9050806040516020016104cf919061111f565b60405160208183030381529060405292505050949350505050565b8151606090600090815b81811015610aea578261053a57845161051590879083908890600090610be1565b15610531578451610526908261138f565b9050600392506104f4565b600192506104f4565b600183036105f9575b818110156105f45785818151811061055d5761055d6113a2565b01602001516001600160f81b031916603d60f81b0361058c576006925061058560018261138f565b90506104f4565b85818151811061059e5761059e6113a2565b01602001516001600160f81b0319167f5b00000000000000000000000000000000000000000000000000000000000000036105e2576002925061058560018261138f565b806105ec816113b8565b915050610543565b6104f4565b600283036106aa575b818110156105f45785818151811061061c5761061c6113a2565b01602001516001600160f81b0319167f5d0000000000000000000000000000000000000000000000000000000000000003610698576006925061066060018261138f565b9050858181518110610674576106746113a2565b01602001516001600160f81b031916603d60f81b036105f45761058560018261138f565b806106a2816113b8565b915050610602565b600383036106f5578581815181106106c4576106c46113a2565b01602001516001600160f81b031916602760f81b036106ec576004925061058560018261138f565b600592506104f4565b6004830361089a57806000805b8484101561089257801561079157888481518110610722576107226113a2565b01602001516001600160f81b0319168961073c848661138f565b8151811061074c5761074c6113a2565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061078660018361138f565b915060009050610880565b8884815181106107a3576107a36113a2565b01602001516001600160f81b031916601760fa1b036107c457506001610880565b8884815181106107d6576107d66113a2565b01602001516001600160f81b031916602760f81b03610807576107fa898484610c04565b96505050505050506102bd565b888481518110610819576108196113a2565b01602001516001600160f81b03191689610833848661138f565b81518110610843576108436113a2565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061087d60018361138f565b91505b8361088a816113b8565b945050610702565b5050506104f4565b6005830361091857805b8282101561090a578682815181106108be576108be6113a2565b01602001516001600160f81b031916600160fd1b036108f8576108ed816108e581856113d1565b899190610c04565b9450505050506102bd565b81610902816113b8565b9250506108a4565b6108ed816108e581866113d1565b6006830361096357858181518110610932576109326113a2565b01602001516001600160f81b031916602760f81b0361095a576007925061058560018261138f565b600892506104f4565b60078303610a4e5760005b82821015610a4857801561098457506000610a36565b868281518110610996576109966113a2565b01602001516001600160f81b031916601760fa1b036109b757506001610a36565b8682815181106109c9576109c96113a2565b01602001516001600160f81b031916602760f81b03610a36576109ed60018361138f565b91505b868281518110610a0257610a026113a2565b01602001516001600160f81b031916600160fd1b03610a2d57610a2660018361138f565b91506109f0565b60009350610a48565b81610a40816113b8565b92505061096e565b506104f4565b60088314610a5e57610a5e6113e4565b818110156105f457858181518110610a7857610a786113a2565b01602001516001600160f81b031916600160fd1b03610ad8575b858181518110610aa457610aa46113a2565b01602001516001600160f81b031916600160fd1b03610acf57610ac860018261138f565b9050610a92565b600092506104f4565b80610ae2816113b8565b915050610a5e565b5050604080516020810190915260008152949350505050565b6000806028610b1285856113d1565b1015610b2357506000905080610b39565b600080610b31878787610c86565b909450925050505b935093915050565b60606000610b4e83610ce3565b600101905060008167ffffffffffffffff811115610b6e57610b6e611270565b6040519080825280601f01601f191660200182016040528015610b98576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610ba257509392505050565b6000610bee848484610dc5565b610bf9878785610dc5565b149695505050505050565b8251606090610c13838561138f565b1115610c1e57600080fd5b60008267ffffffffffffffff811115610c3957610c39611270565b6040519080825280601f01601f191660200182016040528015610c63576020820181803683370190505b50905060208082019086860101610c7b828287610de9565b509095945050505050565b6000806040610c9585856113d1565b1115610ca057600080fd5b600080610cae878787610e3f565b9150915080610cc6575060009250829150610b399050565b50602001516004858503604003021c915060019050935093915050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610d2c577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610d58576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610d7657662386f26fc10000830492506010015b6305f5e1008310610d8e576305f5e100830492506008015b6127108310610da257612710830492506004015b60648310610db4576064830492506002015b600a83106102bd5760010192915050565b8251600090610dd4838561138f565b1115610ddf57600080fd5b5091016020012090565b60208110610e215781518352610e0060208461138f565b9250610e0d60208361138f565b9150610e1a6020826113d1565b9050610de9565b905182516020929092036101000a6000190180199091169116179052565b6060600080610e4e85856113d1565b9050610e5b600282611410565b600103610ec4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c696420737472696e67206c656e6774680000000000000000000000604482015260640161027e565b610ecf600282611424565b67ffffffffffffffff811115610ee757610ee7611270565b6040519080825280601f01601f191660200182016040528015610f11576020820181803683370190505b509250600191508551841115610f2657600080fd5b610f77565b6000603a8210602f83111615610f435750602f190190565b60478210604083111615610f5957506036190190565b60678210606083111615610f6f57506056190190565b5060ff919050565b60208601855b85811015610fdc57610f948183015160001a610f2b565b610fa66001830184015160001a610f2b565b60ff811460ff83141715610fbf57600095505050610fdc565b60049190911b178060028984030487016020015350600201610f7d565b505050935093915050565b600060208284031215610ff957600080fd5b81356001600160e01b03198116811461101157600080fd5b9392505050565b60008083601f84011261102a57600080fd5b50813567ffffffffffffffff81111561104257600080fd5b60208301915083602082850101111561105a57600080fd5b9250929050565b6000806000806000806060878903121561107a57600080fd5b863567ffffffffffffffff8082111561109257600080fd5b61109e8a838b01611018565b909850965060208901359150808211156110b757600080fd5b6110c38a838b01611018565b909650945060408901359150808211156110dc57600080fd5b506110e989828a01611018565b979a9699509497509295939492505050565b60005b838110156111165781810151838201526020016110fe565b50506000910152565b602081526000825180602084015261113e8160408501602087016110fb565b601f01601f19169190910160400192915050565b6001600160e01b0319813581811691600485101561117a5780818660040360031b1b83161692505b505092915050565b6000808585111561119257600080fd5b8386111561119f57600080fd5b5050820193919092039150565b600080604083850312156111bf57600080fd5b50508035926020909101359150565b7f615b6500000000000000000000000000000000000000000000000000000000008152600082516112068160038501602087016110fb565b615d3d60f01b6003939091019283015250600501919050565b7f615b0000000000000000000000000000000000000000000000000000000000008152600082516112578160028501602087016110fb565b615d3d60f01b6002939091019283015250600401919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561129957600080fd5b82359150602083013567ffffffffffffffff808211156112b857600080fd5b818501915085601f8301126112cc57600080fd5b8135818111156112de576112de611270565b604051601f8201601f19908116603f0116810190838211818310171561130657611306611270565b8160405282815288602084870101111561131f57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b7f745b0000000000000000000000000000000000000000000000000000000000008152600082516112578160028501602087016110fb565b634e487b7160e01b600052601160045260246000fd5b808201808211156102bd576102bd611379565b634e487b7160e01b600052603260045260246000fd5b6000600182016113ca576113ca611379565b5060010190565b818103818111156102bd576102bd611379565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60008261141f5761141f6113fa565b500690565b600082611433576114336113fa565b50049056fea2646970667358221220aa535541b2a0a0c839ad95faffa9e4007dc301d94fa0e1840731936bbd43d5f864736f6c63430008110033",
  "devdoc": {
    "details": "Resolves names on ENS by interpreting record data stored in a DNS TXT record.      This resolver implements the IExtendedDNSResolver interface, meaning that when      a DNS name specifies it as the resolver via a TXT record, this resolver's      resolve() method is invoked, and is passed any additional information from that      text record. This resolver implements a simple text parser allowing a variety      of records to be specified in text, which will then be used to resolve the name      in ENS.      To use this, set a TXT record on your DNS name in the following format:          ENS1 <address or name of ExtendedDNSResolver> <record data>      For example:          ENS1 2.dnsname.ens.eth a[60]=0x1234...      The record data consists of a series of key=value pairs, separated by spaces. Keys      may have an optional argument in square brackets, and values may be either unquoted       - in which case they may not contain spaces - or single-quoted. Single quotes in      a quoted value may be backslash-escaped.                                       ┌────────┐                                       │ ┌───┐  │        ┌──────────────────────────────┴─┤\" \"│◄─┴────────────────────────────────────────┐        │                                └───┘                                           │        │  ┌───┐    ┌───┐    ┌───┐    ┌───┐    ┌───┐    ┌───┐    ┌────────────┐    ┌───┐ │      ^─┴─►│key├─┬─►│\"[\"├───►│arg├───►│\"]\"├─┬─►│\"=\"├─┬─►│\"'\"├───►│quoted_value├───►│\"'\"├─┼─$           └───┘ │  └───┘    └───┘    └───┘ │  └───┘ │  └───┘    └────────────┘    └───┘ │                 └──────────────────────────┘        │          ┌──────────────┐         │                                                     └─────────►│unquoted_value├─────────┘                                                                └──────────────┘      Record types:       - a[<coinType>] - Specifies how an `addr()` request should be resolved for the specified         `coinType`. Ethereum has `coinType` 60. The value must be 0x-prefixed hexadecimal, and will         be returned unmodified; this means that non-EVM addresses will need to be translated         into binary format and then encoded in hex.         Examples:          - a[60]=0xFe89cc7aBB2C4183683ab71653C4cdc9B02D44b7          - a[0]=0x00149010587f8364b964fcaa70687216b53bd2cbd798       - a[e<chainId>] - Specifies how an `addr()` request should be resolved for the specified         `chainId`. The value must be 0x-prefixed hexadecimal. When encoding an address for an         EVM-based cryptocurrency that uses a chainId instead of a coinType, this syntax *must*         be used in place of the coin type - eg, Optimism is `a[e10]`, not `a[2147483658]`.         A list of supported cryptocurrencies for both syntaxes can be found here:           https://github.com/ensdomains/address-encoder/blob/master/docs/supported-cryptocurrencies.md         Example:          - a[e10]=0xFe89cc7aBB2C4183683ab71653C4cdc9B02D44b7       - t[<key>] - Specifies how a `text()` request should be resolved for the specified `key`.         Examples:          - t[com.twitter]=nicksdjohnson          - t[url]='https://ens.domains/'          - t[note]='I\\'m great'",
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}