{
  "address": "0xe5Ae1d87D2D14E4758eBE645FD055Aac91996c34",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "ens",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "gateways",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "dns",
          "type": "bytes"
        }
      ],
      "name": "DNSDecodingFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ens",
          "type": "string"
        }
      ],
      "name": "DNSEncodingFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "status",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "HttpError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBatchGatewayResponse",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "errorData",
          "type": "bytes"
        }
      ],
      "name": "ResolverError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "ResolverNotContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        }
      ],
      "name": "ResolverNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "primary",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "primaryAddress",
          "type": "bytes"
        }
      ],
      "name": "ReverseAddressMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "UnsupportedResolverProfile",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "batchGateways",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "target",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "call",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "flags",
                  "type": "uint256"
                }
              ],
              "internalType": "struct CCIPBatcher.Lookup[]",
              "name": "lookups",
              "type": "tuple[]"
            },
            {
              "internalType": "string[]",
              "name": "gateways",
              "type": "string[]"
            }
          ],
          "internalType": "struct CCIPBatcher.Batch",
          "name": "batch",
          "type": "tuple"
        }
      ],
      "name": "ccipBatch",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "target",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "call",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "flags",
                  "type": "uint256"
                }
              ],
              "internalType": "struct CCIPBatcher.Lookup[]",
              "name": "lookups",
              "type": "tuple[]"
            },
            {
              "internalType": "string[]",
              "name": "gateways",
              "type": "string[]"
            }
          ],
          "internalType": "struct CCIPBatcher.Batch",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "ccipBatchCallback",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "target",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "call",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "flags",
                  "type": "uint256"
                }
              ],
              "internalType": "struct CCIPBatcher.Lookup[]",
              "name": "lookups",
              "type": "tuple[]"
            },
            {
              "internalType": "string[]",
              "name": "gateways",
              "type": "string[]"
            }
          ],
          "internalType": "struct CCIPBatcher.Batch",
          "name": "batch",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "ccipReadCallback",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        }
      ],
      "name": "findResolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        }
      ],
      "name": "requireResolver",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "name",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "offset",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "node",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "resolver",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "extended",
              "type": "bool"
            }
          ],
          "internalType": "struct UniversalResolver.ResolverInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "resolveBatchCallback",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "name",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "offset",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "node",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "resolver",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "extended",
              "type": "bool"
            }
          ],
          "internalType": "struct UniversalResolver.ResolverInfo",
          "name": "info",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "call",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "flags",
              "type": "uint256"
            }
          ],
          "internalType": "struct CCIPBatcher.Lookup[]",
          "name": "lookups",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "resolveCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "gateways",
          "type": "string[]"
        }
      ],
      "name": "resolveWithGateways",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "encodedAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        }
      ],
      "name": "reverse",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "name",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "offset",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "node",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "resolver",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "extended",
              "type": "bool"
            }
          ],
          "internalType": "struct UniversalResolver.ResolverInfo",
          "name": "info",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "call",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "flags",
              "type": "uint256"
            }
          ],
          "internalType": "struct CCIPBatcher.Lookup[]",
          "name": "lookups",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "reverseAddressCallback",
      "outputs": [
        {
          "internalType": "string",
          "name": "primary",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reverseResolver",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "name",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "offset",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "node",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "resolver",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "extended",
              "type": "bool"
            }
          ],
          "internalType": "struct UniversalResolver.ResolverInfo",
          "name": "infoRev",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "call",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "flags",
              "type": "uint256"
            }
          ],
          "internalType": "struct CCIPBatcher.Lookup[]",
          "name": "lookups",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "reverseNameCallback",
      "outputs": [
        {
          "internalType": "string",
          "name": "primary",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "encodedAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "gateways",
          "type": "string[]"
        }
      ],
      "name": "reverseWithGateways",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "gateways",
          "type": "string[]"
        }
      ],
      "name": "setBatchGateways",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x42398c573bb29ef169287fd7a5efd24fc8805d427af0f0897e5e6da608599a3f",
  "receipt": {
    "to": null,
    "from": "0xb769BEFa05c7D9B08062630E351e865d3F49c56D",
    "contractAddress": "0xe5Ae1d87D2D14E4758eBE645FD055Aac91996c34",
    "transactionIndex": 0,
    "gasUsed": "3816184",
    "logsBloom": "0x
    "blockHash": "0xa505385ae9dd535ec0e50049102b528ba4f4702e5a3c1e751f03f341e409a347",
    "transactionHash": "0x42398c573bb29ef169287fd7a5efd24fc8805d427af0f0897e5e6da608599a3f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 345384,
        "transactionHash": "0x42398c573bb29ef169287fd7a5efd24fc8805d427af0f0897e5e6da608599a3f",
        "address": "0xe5Ae1d87D2D14E4758eBE645FD055Aac91996c34",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b769befa05c7d9b08062630e351e865d3f49c56d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa505385ae9dd535ec0e50049102b528ba4f4702e5a3c1e751f03f341e409a347"
      }
    ],
    "blockNumber": 345384,
    "cumulativeGasUsed": "3816184",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4B10A480BDaC6cC27Be0e26F49c4fD3359Abba00",
    [
      "https://universal-offchain-unwrapper-v2.teknix5947.workers.dev/"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "a1e1d5b66dfd83a1d0fa11e304175e2f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"ens\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"gateways\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"dns\",\"type\":\"bytes\"}],\"name\":\"DNSDecodingFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ens\",\"type\":\"string\"}],\"name\":\"DNSEncodingFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"status\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"HttpError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBatchGatewayResponse\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"errorData\",\"type\":\"bytes\"}],\"name\":\"ResolverError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"ResolverNotContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"ResolverNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"primary\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"primaryAddress\",\"type\":\"bytes\"}],\"name\":\"ReverseAddressMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"UnsupportedResolverProfile\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchGateways\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"call\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"internalType\":\"struct CCIPBatcher.Lookup[]\",\"name\":\"lookups\",\"type\":\"tuple[]\"},{\"internalType\":\"string[]\",\"name\":\"gateways\",\"type\":\"string[]\"}],\"internalType\":\"struct CCIPBatcher.Batch\",\"name\":\"batch\",\"type\":\"tuple\"}],\"name\":\"ccipBatch\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"call\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"internalType\":\"struct CCIPBatcher.Lookup[]\",\"name\":\"lookups\",\"type\":\"tuple[]\"},{\"internalType\":\"string[]\",\"name\":\"gateways\",\"type\":\"string[]\"}],\"internalType\":\"struct CCIPBatcher.Batch\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ccipBatchCallback\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"call\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"internalType\":\"struct CCIPBatcher.Lookup[]\",\"name\":\"lookups\",\"type\":\"tuple[]\"},{\"internalType\":\"string[]\",\"name\":\"gateways\",\"type\":\"string[]\"}],\"internalType\":\"struct CCIPBatcher.Batch\",\"name\":\"batch\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ccipReadCallback\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"findResolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"requireResolver\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"extended\",\"type\":\"bool\"}],\"internalType\":\"struct UniversalResolver.ResolverInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"resolveBatchCallback\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"extended\",\"type\":\"bool\"}],\"internalType\":\"struct UniversalResolver.ResolverInfo\",\"name\":\"info\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"call\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"internalType\":\"struct CCIPBatcher.Lookup[]\",\"name\":\"lookups\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"resolveCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"gateways\",\"type\":\"string[]\"}],\"name\":\"resolveWithGateways\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"reverse\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"extended\",\"type\":\"bool\"}],\"internalType\":\"struct UniversalResolver.ResolverInfo\",\"name\":\"info\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"call\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"internalType\":\"struct CCIPBatcher.Lookup[]\",\"name\":\"lookups\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"reverseAddressCallback\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"primary\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reverseResolver\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"extended\",\"type\":\"bool\"}],\"internalType\":\"struct UniversalResolver.ResolverInfo\",\"name\":\"infoRev\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"call\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"internalType\":\"struct CCIPBatcher.Lookup[]\",\"name\":\"lookups\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"reverseNameCallback\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"primary\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"gateways\",\"type\":\"string[]\"}],\"name\":\"reverseWithGateways\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"gateways\",\"type\":\"string[]\"}],\"name\":\"setBatchGateways\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"DNSDecodingFailed(bytes)\":[{\"details\":\"The DNS-encoded name is malformed.\"}],\"DNSEncodingFailed(string)\":[{\"details\":\"A label of the ENS name has an invalid size.\"}],\"EmptyAddress()\":[{\"details\":\"The supplied address was `0x`.\"}],\"HttpError(uint16,string)\":[{\"details\":\"Error selector: `0x01800152`\"}],\"InvalidBatchGatewayResponse()\":[{\"details\":\"The batch gateway supplied an incorrect number of responses.\"}],\"OffchainLookup(address,string[],bytes,bytes4,bytes)\":[{\"details\":\"https://eips.ethereum.org/EIPS/eip-3668 Error selector: `0x556f1830`\"}],\"ResolverError(bytes)\":[{\"details\":\"Error selector: `0x95c0c752`\"}],\"ResolverNotContract(bytes,address)\":[{\"details\":\"Error selector: `0x1e9535f2`\"}],\"ResolverNotFound(bytes)\":[{\"details\":\"Error selector: `0x77209fe8`\"}],\"ReverseAddressMismatch(string,bytes)\":[{\"details\":\"Error selector: `0xef9c03ce`\"}],\"UnsupportedResolverProfile(bytes4)\":[{\"details\":\"Error selector: `0x7b1c461b`\"}]},\"kind\":\"dev\",\"methods\":{\"ccipBatch(((address,bytes,bytes,uint256)[],string[]))\":{\"details\":\"Use `CCIPReader.ccipRead()` to call this function with a batch.      The callback `response` will be `abi.encode(batch)`.\"},\"ccipBatchCallback(bytes,bytes)\":{\"details\":\"CCIP-Read callback for `ccipBatch()`.      Updates `batch` using the batch gateway response. Reverts again if not \\\"done\\\".\",\"params\":{\"extraData\":\"The contextual data passed from `ccipBatch()`.\",\"response\":\"The response from the batch gateway.\"},\"returns\":{\"batch\":\"The batch where every lookup is \\\"done\\\".\"}},\"ccipReadCallback(bytes,bytes)\":{\"details\":\"CCIP-Read callback for `ccipRead()`.The return type of this function is polymorphic depending on the caller.\",\"params\":{\"extraData\":\"The contextual data passed from `ccipRead()`.\",\"response\":\"The response from offchain.\"}},\"findResolver(bytes)\":{\"details\":\"Find the resolver address for `name`.      Does not perform any validity checks.\",\"params\":{\"name\":\"The name to search.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"requireResolver(bytes)\":{\"details\":\"Returns a valid resolver for `name` or reverts.\",\"params\":{\"name\":\"The name to search.\"},\"returns\":{\"info\":\"The resolver information.\"}},\"resolveBatchCallback(bytes,bytes)\":{\"details\":\"CCIP-Read callback for `_resolveBatch()`.\",\"params\":{\"extraData\":\"The contextual data from `_resolveBatch()`.\",\"response\":\"The response data from `CCIPBatcher`.\"}},\"resolveCallback((bytes,uint256,bytes32,address,bool),(address,bytes,bytes,uint256)[],bytes)\":{\"details\":\"CCIP-Read callback for `resolveWithGateways()` (step 2 of 2).\",\"params\":{\"extraData\":\"The contextual data passed from `resolveWithGateways()`.\",\"info\":\"The resolver that was called.\",\"lookups\":\"The lookups corresponding to the requested call.\"},\"returns\":{\"resolver\":\"The address of the resolver that supplied `result`.\",\"result\":\"The encoded response for the requested call.\"}},\"resolveWithGateways(bytes,bytes,string[])\":{\"details\":\"This function executes over multiple steps (step 1 of 2).\",\"returns\":{\"_0\":\"result The encoded response for the requested call.\",\"_1\":\"resolver The address of the resolver that supplied `result`.\"}},\"reverseAddressCallback((bytes,uint256,bytes32,address,bool),(address,bytes,bytes,uint256)[],bytes)\":{\"details\":\"CCIP-Read callback for `reverseNameCallback()` (step 3 of 3).      Reverts `ReverseAddressMismatch`.\",\"params\":{\"extraData\":\"The contextual data passed from `reverseNameCallback()`.\",\"info\":\"The resolver for the primary name that was called.\",\"lookups\":\"The lookups corresponding to the calls: `[addr()]`.\"},\"returns\":{\"primary\":\"The resolved primary name.\",\"resolver\":\"The resolver address for primary name.\",\"reverseResolver\":\"The resolver address for the reverse name.\"}},\"reverseNameCallback((bytes,uint256,bytes32,address,bool),(address,bytes,bytes,uint256)[],bytes)\":{\"details\":\"CCIP-Read callback for `reverseWithGateways()` (step 2 of 3).\",\"params\":{\"extraData\":\"The contextual data passed from `reverseWithGateways()`.\",\"infoRev\":\"The resolver for the reverse name that was called.\",\"lookups\":\"The lookups corresponding to the calls: `[name()]`.\"}},\"reverseWithGateways(bytes,uint256,string[])\":{\"details\":\"This function executes over multiple steps (step 1 of 3).\",\"params\":{\"coinType\":\"The coin type.\",\"encodedAddress\":\"The input address.\",\"gateways\":\"The list of batch gateway URLs to use.\"}},\"setBatchGateways(string[])\":{\"details\":\"Set the default batch gateways, see: `resolve()` and `reverse()`.\",\"params\":{\"gateways\":\"The list of batch gateway URLs to use as default.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"HttpError(uint16,string)\":[{\"notice\":\"An HTTP error occurred on a resolving gateway.\"}],\"ResolverError(bytes)\":[{\"notice\":\"The resolver returned an error.\"}],\"ResolverNotContract(bytes,address)\":[{\"notice\":\"The resolver is not a contract.\"}],\"ResolverNotFound(bytes)\":[{\"notice\":\"A resolver could not be found for the supplied name.\"}],\"ReverseAddressMismatch(string,bytes)\":[{\"notice\":\"The resolved address from reverse resolution does not match the supplied address.\"}],\"UnsupportedResolverProfile(bytes4)\":[{\"notice\":\"The resolver did not respond.\"}]},\"kind\":\"user\",\"methods\":{\"resolve(bytes,bytes)\":{\"notice\":\"Same as `resolveWithGateways()` but uses default batch gateways.\"},\"resolveWithGateways(bytes,bytes,string[])\":{\"notice\":\"Performs ENS name resolution for the supplied name and resolution data.Callers should enable EIP-3668.\"},\"reverse(bytes,uint256)\":{\"notice\":\"Same as `reverseWithGateways()` but uses default batch gateways.\"},\"reverseWithGateways(bytes,uint256,string[])\":{\"notice\":\"Performs ENS reverse resolution for the supplied address and coin type.Callers should enable EIP-3668.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/universalResolver/UniversalResolver.sol\":\"UniversalResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5a08ad61f4e82b8a3323562661a86fb10b10190848073fdc13d4ac43710ffba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ccipRead/CCIPBatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IBatchGateway} from \\\"./IBatchGateway.sol\\\";\\nimport {CCIPReader, EIP3668, OffchainLookup} from \\\"./CCIPReader.sol\\\";\\n\\ncontract CCIPBatcher is CCIPReader {\\n    /// @dev The batch gateway supplied an incorrect number of responses.\\n    error InvalidBatchGatewayResponse();\\n\\n    uint256 constant FLAG_OFFCHAIN = 1 << 0; // the lookup reverted `OffchainLookup`\\n    uint256 constant FLAG_CALL_ERROR = 1 << 1; // the initial call or callback reverted\\n    uint256 constant FLAG_BATCH_ERROR = 1 << 2; // `OffchainLookup` failed on the batch gateway\\n    uint256 constant FLAG_EMPTY_RESPONSE = 1 << 3; // the initial call or callback returned `0x`\\n    uint256 constant FLAG_EIP140_BEFORE = 1 << 4; // does not have revert op code\\n    uint256 constant FLAG_EIP140_AFTER = 1 << 5; // has revert op code\\n    uint256 constant FLAG_DONE = 1 << 6; // the lookup has finished processing (private)\\n\\n    uint256 constant FLAGS_ANY_ERROR =\\n        FLAG_CALL_ERROR | FLAG_BATCH_ERROR | FLAG_EMPTY_RESPONSE;\\n    uint256 constant FLAGS_ANY_EIP140 = FLAG_EIP140_BEFORE | FLAG_EIP140_AFTER;\\n\\n    /// @dev An independent `OffchainLookup` session.\\n    struct Lookup {\\n        address target; // contract to call\\n        bytes call; // initial calldata\\n        bytes data; // response or error\\n        uint256 flags; // see: FLAG_*\\n    }\\n\\n    /// @dev A batch gateway session.\\n    struct Batch {\\n        Lookup[] lookups;\\n        string[] gateways;\\n    }\\n\\n    /// @dev Use `CCIPReader.ccipRead()` to call this function with a batch.\\n    ///      The callback `response` will be `abi.encode(batch)`.\\n    function ccipBatch(\\n        Batch memory batch\\n    ) external view returns (Batch memory) {\\n        for (uint256 i; i < batch.lookups.length; i++) {\\n            Lookup memory lu = batch.lookups[i];\\n            if ((lu.flags & FLAGS_ANY_EIP140) == 0) {\\n                uint256 flags = _detectEIP140(lu.target)\\n                    ? FLAG_EIP140_AFTER\\n                    : FLAG_EIP140_BEFORE;\\n                for (uint256 j = i; j < batch.lookups.length; j++) {\\n                    if (batch.lookups[j].target == lu.target) {\\n                        batch.lookups[j].flags |= flags;\\n                    }\\n                }\\n            }\\n            bool old = (lu.flags & FLAG_EIP140_AFTER) == 0;\\n            (bool ok, bytes memory v) = _safeCall(!old, lu.target, lu.call);\\n            if (ok || (old && v.length == 0)) {\\n                lu.flags |= FLAG_DONE;\\n                if (v.length == 0) {\\n                    v = abi.encodePacked(bytes4(lu.call));\\n                    lu.flags |= FLAG_EMPTY_RESPONSE;\\n                }\\n            } else if (bytes4(v) == OffchainLookup.selector) {\\n                lu.flags |= FLAG_OFFCHAIN;\\n            } else {\\n                lu.flags |= FLAG_DONE | FLAG_CALL_ERROR;\\n            }\\n            lu.data = v;\\n        }\\n        _revertBatchGateway(batch); // reverts if any offchain\\n        return batch;\\n    }\\n\\n    /// @dev Check if the batch is \\\"done\\\".  If not, revert `OffchainLookup` for batch gateway.\\n    function _revertBatchGateway(Batch memory batch) internal view {\\n        IBatchGateway.Request[] memory requests = new IBatchGateway.Request[](\\n            batch.lookups.length\\n        );\\n        uint256 count;\\n        for (uint256 i; i < batch.lookups.length; i++) {\\n            Lookup memory lu = batch.lookups[i];\\n            if ((lu.flags & FLAG_DONE) == 0) {\\n                EIP3668.Params memory p = decodeOffchainLookup(lu.data);\\n                requests[count++] = IBatchGateway.Request(\\n                    p.sender,\\n                    p.urls,\\n                    p.callData\\n                );\\n            }\\n        }\\n        if (count > 0) {\\n            assembly {\\n                mstore(requests, count) // truncate to number of offchain requests\\n            }\\n            revert OffchainLookup(\\n                address(this),\\n                batch.gateways,\\n                abi.encodeCall(IBatchGateway.query, (requests)),\\n                this.ccipBatchCallback.selector,\\n                abi.encode(batch)\\n            );\\n        }\\n    }\\n\\n    /// @dev CCIP-Read callback for `ccipBatch()`.\\n    ///      Updates `batch` using the batch gateway response. Reverts again if not \\\"done\\\".\\n    /// @param response The response from the batch gateway.\\n    /// @param extraData The contextual data passed from `ccipBatch()`.\\n    /// @return batch The batch where every lookup is \\\"done\\\".\\n    function ccipBatchCallback(\\n        bytes calldata response,\\n        bytes calldata extraData\\n    ) external view returns (Batch memory batch) {\\n        (bool[] memory failures, bytes[] memory responses) = abi.decode(\\n            response,\\n            (bool[], bytes[])\\n        );\\n        if (failures.length != responses.length) {\\n            revert InvalidBatchGatewayResponse();\\n        }\\n        batch = abi.decode(extraData, (Batch));\\n        uint256 expected;\\n        for (uint256 i; i < batch.lookups.length; i++) {\\n            Lookup memory lu = batch.lookups[i];\\n            if ((lu.flags & FLAG_DONE) == 0) {\\n                if (expected < responses.length) {\\n                    bytes memory v = responses[expected];\\n                    if (failures[expected]) {\\n                        lu.flags |= FLAG_DONE | FLAG_BATCH_ERROR;\\n                    } else {\\n                        EIP3668.Params memory p = decodeOffchainLookup(lu.data);\\n                        bool ok;\\n                        (ok, v) = p.sender.staticcall(\\n                            abi.encodeWithSelector(\\n                                p.callbackFunction,\\n                                v,\\n                                p.extraData\\n                            )\\n                        );\\n                        if (ok) {\\n                            lu.flags |= FLAG_DONE;\\n                            if (v.length == 0) {\\n                                v = abi.encodePacked(p.callbackFunction);\\n                                lu.flags |= FLAG_EMPTY_RESPONSE;\\n                            }\\n                        } else if (bytes4(v) != OffchainLookup.selector) {\\n                            lu.flags |= FLAG_DONE | FLAG_CALL_ERROR;\\n                        }\\n                    }\\n                    lu.data = v;\\n                }\\n                ++expected;\\n            }\\n        }\\n        if (expected != responses.length) {\\n            revert InvalidBatchGatewayResponse();\\n        }\\n        _revertBatchGateway(batch);\\n    }\\n}\\n\",\"keccak256\":\"0x0e40ec8cea3926109acc011f7337b16f08bd922332d00be5447279117482ae9d\",\"license\":\"MIT\"},\"contracts/ccipRead/CCIPReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/// @author Modified from https://github.com/unruggable-labs/CCIPReader.sol/blob/341576fe7ff2b6e0c93fc08f37740cf6439f5873/contracts/CCIPReader.sol\\n\\n/// MIT License\\n/// Portions Copyright (c) 2025 Unruggable\\n/// Portions Copyright (c) 2025 ENS Labs Ltd\\n\\n/// @dev Instructions:\\n/// 1. inherit this contract\\n/// 2. call `ccipRead()` similar to `staticcall()`\\n/// 3. do not put logic after this invocation\\n/// 4. implement all response logic in callback\\n/// 5. ensure that return type of calling function == callback function\\n\\nimport {EIP3668, OffchainLookup} from \\\"./EIP3668.sol\\\";\\nimport {BytesUtils} from \\\"../utils/BytesUtils.sol\\\";\\n\\ncontract CCIPReader {\\n    /// @dev A recursive CCIP-Read session.\\n    struct Context {\\n        address target;\\n        bytes4 callbackFunction;\\n        bytes extraData;\\n        bytes4 myCallbackFunction;\\n        bytes myExtraData;\\n    }\\n\\n    /// @dev Special-purpose value for identity callback: `f(x) = x`.\\n    bytes4 constant IDENTITY_FUNCTION = bytes4(0);\\n\\n    /// @dev Same as `ccipRead()` but the callback function is the identity.\\n    function ccipRead(address target, bytes memory call) internal view {\\n        ccipRead(target, call, IDENTITY_FUNCTION, \\\"\\\");\\n    }\\n\\n    /// @dev Performs a CCIP-Read and handles internal recursion.\\n    ///      Reverts `OffchainLookup` if necessary.\\n    /// @param target The contract address.\\n    /// @param call The calldata to `staticcall()` on `target`.\\n    /// @param callbackFunction The function selector of callback.\\n    /// @param extraData The contextual data relayed to `callbackFunction`.\\n    function ccipRead(\\n        address target,\\n        bytes memory call,\\n        bytes4 callbackFunction,\\n        bytes memory extraData\\n    ) internal view {\\n        // We call the intended function that **could** revert with an `OffchainLookup`\\n        // We destructure the response into an execution status bool and our return bytes\\n        (bool ok, bytes memory v) = _safeCall(\\n            _detectEIP140(target),\\n            target,\\n            call\\n        );\\n        // IF the function reverted with an `OffchainLookup`\\n        if (!ok && bytes4(v) == OffchainLookup.selector) {\\n            // We decode the response error into a tuple\\n            // tuples allow flexibility noting stack too deep constraints\\n            EIP3668.Params memory p = decodeOffchainLookup(v);\\n            if (p.sender == target) {\\n                // We then wrap the error data in an `OffchainLookup` sent/'owned' by this contract\\n                revert OffchainLookup(\\n                    address(this),\\n                    p.urls,\\n                    p.callData,\\n                    this.ccipReadCallback.selector,\\n                    abi.encode(\\n                        Context(\\n                            target,\\n                            p.callbackFunction,\\n                            p.extraData,\\n                            callbackFunction,\\n                            extraData\\n                        )\\n                    )\\n                );\\n            }\\n        }\\n        // IF we have gotten here, the 'real' target does not revert with an `OffchainLookup` error\\n        if (ok && callbackFunction != IDENTITY_FUNCTION) {\\n            // The exit point of this architecture is  OUR callback in the 'real'\\n            // We pass through the response to that callback\\n            (ok, v) = address(this).staticcall(\\n                abi.encodeWithSelector(callbackFunction, v, extraData)\\n            );\\n        }\\n        // OR the call to the 'real' target reverts with a different error selector\\n        // OR the call to OUR callback reverts with ANY error selector\\n        if (ok) {\\n            assembly {\\n                return(add(v, 32), mload(v))\\n            }\\n        } else {\\n            assembly {\\n                revert(add(v, 32), mload(v))\\n            }\\n        }\\n    }\\n\\n    /// @dev CCIP-Read callback for `ccipRead()`.\\n    /// @param response The response from offchain.\\n    /// @param extraData The contextual data passed from `ccipRead()`.\\n    /// @dev The return type of this function is polymorphic depending on the caller.\\n    function ccipReadCallback(\\n        bytes memory response,\\n        bytes memory extraData\\n    ) external view {\\n        Context memory ctx = abi.decode(extraData, (Context));\\n        // Since the callback can revert too (but has the same return structure)\\n        // We can reuse the calling infrastructure to call the callback\\n        ccipRead(\\n            ctx.target,\\n            abi.encodeWithSelector(\\n                ctx.callbackFunction,\\n                response,\\n                ctx.extraData\\n            ),\\n            ctx.myCallbackFunction,\\n            ctx.myExtraData\\n        );\\n    }\\n\\n    /// @dev Decode `OffchainLookup` error data into a struct.\\n    /// @param v The error data of the revert.\\n    /// @return p The decoded `OffchainLookup` params.\\n    function decodeOffchainLookup(\\n        bytes memory v\\n    ) internal pure returns (EIP3668.Params memory p) {\\n        p = EIP3668.decode(BytesUtils.substring(v, 4, v.length - 4));\\n    }\\n\\n    /// @dev Determine if `target` uses `revert()` instead of `invalid()`.\\n    //       Assumption: only newer contracts revert `OffchainLookup`.\\n    /// @param target The contract to test.\\n    /// @return safe True if safe to call.\\n    function _detectEIP140(address target) internal view returns (bool safe) {\\n        if (target == address(this)) return true;\\n        // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-140.md\\n        assembly {\\n            let G := 5000\\n            let g := gas()\\n            pop(staticcall(G, target, 0, 0, 0, 0))\\n            safe := lt(sub(g, gas()), G)\\n        }\\n    }\\n\\n    /// @dev Same as `staticcall()` but prevents OOG when not `safe`.\\n    function _safeCall(\\n        bool safe,\\n        address target,\\n        bytes memory call\\n    ) internal view returns (bool ok, bytes memory v) {\\n        (ok, v) = target.staticcall{gas: safe ? gasleft() : 50000}(call);\\n    }\\n}\\n\",\"keccak256\":\"0x2b04a125c330ab85380008422992fe292f341da717c3d0b4317806ac9e578a30\",\"license\":\"MIT\"},\"contracts/ccipRead/EIP3668.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @dev https://eips.ethereum.org/EIPS/eip-3668\\n/// Error selector: `0x556f1830`\\nerror OffchainLookup(\\n    address sender,\\n    string[] urls,\\n    bytes callData,\\n    bytes4 callbackFunction,\\n    bytes extraData\\n);\\n\\n/// @dev Simple library for decoding `OffchainLookup` error data.\\n/// Avoids \\\"stack too deep\\\" issues as the natural decoding consumes 5 variables.\\nlibrary EIP3668 {\\n    /// @dev Struct with members matching `OffchainLookup`.\\n    struct Params {\\n        address sender;\\n        string[] urls;\\n        bytes callData;\\n        bytes4 callbackFunction;\\n        bytes extraData;\\n    }\\n\\n    /// @dev Decode an `OffchainLookup` into a struct from the data after the error selector.\\n    function decode(bytes memory v) internal pure returns (Params memory p) {\\n        (p.sender, p.urls, p.callData, p.callbackFunction, p.extraData) = abi\\n            .decode(v, (address, string[], bytes, bytes4, bytes));\\n    }\\n}\\n\",\"keccak256\":\"0x14619de0f3d9f085e6209767b35c2888b8d2af6d787af535f30db7b51e843bf8\",\"license\":\"MIT\"},\"contracts/ccipRead/IBatchGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBatchGateway {\\n    struct Request {\\n        address sender;\\n        string[] urls;\\n        bytes data;\\n    }\\n\\n    function query(\\n        Request[] memory\\n    ) external view returns (bool[] memory failures, bytes[] memory responses);\\n}\\n\",\"keccak256\":\"0x679340fecc00ddb615c1ae68bca669e2727cb9833cf29b8af957c124d5f76217\",\"license\":\"MIT\"},\"contracts/registry/ENS.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8e208b44d5dbf22552fe72d79b45c640855b84fbc9ee21f4c3bb4bfe81cbe8db\",\"license\":\"MIT\"},\"contracts/resolvers/IMulticallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IMulticallable {\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n\\n    function multicallWithNodeCheck(\\n        bytes32,\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x0334202e20bb11995997083d05963f5e8e7ed6194cba494e7f9371ab7bf4e2c3\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/// Interface for the legacy (ETH-only) addr function.\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /// Returns the address associated with an ENS node.\\n    /// @param node The ENS node to query.\\n    /// @return The associated address.\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x91dd0c350698c505d6c7e4c919da9f981d4b8d7ad062e25073fa1f6af7cb79d1\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/// Interface for the new (multicoin) addr function.\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x8da5dd0fc1c5ab4f47e03c23126976a86d4b2dbeac161e70e3af9e2a13330cf0\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n    function resolve(\\n        bytes memory name,\\n        bytes memory data\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5d81521cfae7d9a4475d27533cd8ed0d3475d369eb0674fd90ffbdbdf292faa3\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /// Returns the name associated with an ENS node, for reverse records.\\n    /// Defined in EIP181.\\n    /// @param node The ENS node to query.\\n    /// @return The associated name.\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x3ab986332e0baad7aeb4b426aace3aa1c235be5efff8db4b6f1ce501bcdd9e68\",\"license\":\"MIT\"},\"contracts/universalResolver/IUniversalResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice Interface for the UniversalResolver.\\n/// @dev Interface selector: `0xcd191b34`\\ninterface IUniversalResolver {\\n    /// @notice A resolver could not be found for the supplied name.\\n    /// @dev Error selector: `0x77209fe8`\\n    error ResolverNotFound(bytes name);\\n\\n    /// @notice The resolver is not a contract.\\n    /// @dev Error selector: `0x1e9535f2`\\n    error ResolverNotContract(bytes name, address resolver);\\n\\n    /// @notice The resolver did not respond.\\n    /// @dev Error selector: `0x7b1c461b`\\n    error UnsupportedResolverProfile(bytes4 selector);\\n\\n    /// @notice The resolver returned an error.\\n    /// @dev Error selector: `0x95c0c752`\\n    error ResolverError(bytes errorData);\\n\\n    /// @notice The resolved address from reverse resolution does not match the supplied address.\\n    /// @dev Error selector: `0xef9c03ce`\\n    error ReverseAddressMismatch(string primary, bytes primaryAddress);\\n\\n    /// @notice An HTTP error occurred on a resolving gateway.\\n    /// @dev Error selector: `0x01800152`\\n    error HttpError(uint16 status, string message);\\n\\n    /// @notice Performs ENS name resolution for the supplied name and resolution data.\\n    /// @notice Callers should enable EIP-3668.\\n    /// @param name The name to resolve, in normalised and DNS-encoded form.\\n    /// @param data The resolution data, as specified in ENSIP-10.\\n    ///             For a multicall, the data should be encoded as `(bytes[])`.\\n    /// @return result The result of the resolution.\\n    ///                For a multicall, the result is encoded as `(bytes[])`.\\n    /// @return resolver The resolver that was used to resolve the name.\\n    function resolve(\\n        bytes calldata name,\\n        bytes calldata data\\n    ) external view returns (bytes memory result, address resolver);\\n\\n    /// @notice Performs ENS reverse resolution for the supplied address and coin type.\\n    /// @notice Callers should enable EIP-3668.\\n    /// @param lookupAddress The address to reverse resolve, in encoded form.\\n    /// @param coinType The coin type to use for the reverse resolution.\\n    ///                 For ETH, this is 60.\\n    ///                 For other EVM chains, coinType is calculated as `0x80000000 | chainId`.\\n    /// @return primary The reverse resolution result.\\n    /// @return resolver The resolver that was used to resolve the name.\\n    /// @return reverseResolver The resolver that was used to resolve the reverse name.\\n    function reverse(\\n        bytes calldata lookupAddress,\\n        uint256 coinType\\n    )\\n        external\\n        view\\n        returns (\\n            string memory primary,\\n            address resolver,\\n            address reverseResolver\\n        );\\n}\\n\",\"keccak256\":\"0x7e8560d5283c807df89dca17cae577e4e497da4adcbeae8a21c5828841d72b16\",\"license\":\"MIT\"},\"contracts/universalResolver/UniversalResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {ERC165Checker} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {IUniversalResolver} from \\\"./IUniversalResolver.sol\\\";\\nimport {CCIPBatcher} from \\\"../ccipRead/CCIPBatcher.sol\\\";\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\nimport {IExtendedResolver} from \\\"../resolvers/profiles/IExtendedResolver.sol\\\";\\nimport {INameResolver} from \\\"../resolvers/profiles/INameResolver.sol\\\";\\nimport {IAddrResolver} from \\\"../resolvers/profiles/IAddrResolver.sol\\\";\\nimport {IAddressResolver} from \\\"../resolvers/profiles/IAddressResolver.sol\\\";\\nimport {IMulticallable} from \\\"../resolvers/IMulticallable.sol\\\";\\nimport {NameCoder} from \\\"../utils/NameCoder.sol\\\";\\nimport {BytesUtils} from \\\"../utils/BytesUtils.sol\\\";\\nimport {ENSIP19, COIN_TYPE_ETH} from \\\"../utils/ENSIP19.sol\\\";\\n\\ncontract UniversalResolver is IUniversalResolver, CCIPBatcher, Ownable, ERC165 {\\n    ENS public immutable registry;\\n    string[] public batchGateways;\\n\\n    constructor(ENS ens, string[] memory gateways) {\\n        registry = ens;\\n        batchGateways = gateways;\\n    }\\n\\n    /// @inheritdoc ERC165\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override(ERC165) returns (bool) {\\n        return\\n            type(IUniversalResolver).interfaceId == interfaceID ||\\n            super.supportsInterface(interfaceID);\\n    }\\n\\n    /// @dev Set the default batch gateways, see: `resolve()` and `reverse()`.\\n    /// @param gateways The list of batch gateway URLs to use as default.\\n    function setBatchGateways(string[] memory gateways) external onlyOwner {\\n        batchGateways = gateways;\\n    }\\n\\n    /// @dev Find the resolver address for `name`.\\n    ///      Does not perform any validity checks.\\n    /// @param name The name to search.\\n    function findResolver(\\n        bytes memory name\\n    ) external view returns (address, bytes32, uint256) {\\n        return _findResolver(name, 0);\\n    }\\n\\n    /// @dev Efficiently find the resolver address for `name[offset:]`.\\n    /// @param name The name to search.\\n    /// @param offset The byte-offset into `name` to begin the search.\\n    /// @return resolver The address of the resolver.\\n    /// @return node The namehash of name corresponding to the resolver.\\n    /// @return offset_ The byte-offset into `name` of the name corresponding to the resolver.\\n    function _findResolver(\\n        bytes memory name,\\n        uint256 offset\\n    ) internal view returns (address resolver, bytes32 node, uint256 offset_) {\\n        (bytes32 labelHash, uint256 next) = NameCoder.readLabel(name, offset);\\n        if (labelHash != bytes32(0)) {\\n            (\\n                address parentResolver,\\n                bytes32 parentNode,\\n                uint256 parentOffset\\n            ) = _findResolver(name, next);\\n            node = keccak256(abi.encodePacked(parentNode, labelHash));\\n            resolver = registry.resolver(node);\\n            return\\n                resolver != address(0)\\n                    ? (resolver, node, offset)\\n                    : (parentResolver, node, parentOffset);\\n        }\\n    }\\n\\n    /// @dev A valid resolver and its relevant properties.\\n    struct ResolverInfo {\\n        bytes name; // dns-encoded name (safe to decode)\\n        uint256 offset; // byte offset into name used for resolver\\n        bytes32 node; // namehash(name)\\n        address resolver;\\n        bool extended; // IExtendedResolver\\n    }\\n\\n    /// @dev Returns a valid resolver for `name` or reverts.\\n    /// @param name The name to search.\\n    /// @return info The resolver information.\\n    function requireResolver(\\n        bytes memory name\\n    ) public view returns (ResolverInfo memory info) {\\n        // https://docs.ens.domains/ensip/10\\n        info.name = name;\\n        (info.resolver, info.node, info.offset) = _findResolver(name, 0);\\n        if (info.resolver == address(0)) {\\n            revert ResolverNotFound(name);\\n        } else if (\\n            ERC165Checker.supportsERC165InterfaceUnchecked(\\n                info.resolver,\\n                type(IExtendedResolver).interfaceId\\n            )\\n        ) {\\n            info.extended = true;\\n        } else if (info.offset != 0) {\\n            revert ResolverNotFound(name); // immediate resolver requires exact match\\n        } else if (info.resolver.code.length == 0) {\\n            revert ResolverNotContract(name, info.resolver);\\n        }\\n    }\\n\\n    /// @notice Same as `resolveWithGateways()` but uses default batch gateways.\\n    function resolve(\\n        bytes calldata name,\\n        bytes calldata data\\n    ) external view returns (bytes memory /*result*/, address /*resolver*/) {\\n        return resolveWithGateways(name, data, batchGateways);\\n    }\\n\\n    /// @notice Performs ENS name resolution for the supplied name and resolution data.\\n    /// @notice Callers should enable EIP-3668.\\n    /// @dev This function executes over multiple steps (step 1 of 2).\\n    /// @return result The encoded response for the requested call.\\n    /// @return resolver The address of the resolver that supplied `result`.\\n    function resolveWithGateways(\\n        bytes calldata name,\\n        bytes calldata data,\\n        string[] memory gateways\\n    ) public view returns (bytes memory /*result*/, address /*resolver*/) {\\n        bool multi = bytes4(data) == IMulticallable.multicall.selector;\\n        _resolveBatch(\\n            requireResolver(name),\\n            multi ? abi.decode(data[4:], (bytes[])) : _oneCall(data),\\n            gateways,\\n            this.resolveCallback.selector,\\n            abi.encode(multi)\\n        );\\n    }\\n\\n    /// @dev CCIP-Read callback for `resolveWithGateways()` (step 2 of 2).\\n    /// @param info The resolver that was called.\\n    /// @param lookups The lookups corresponding to the requested call.\\n    /// @param extraData The contextual data passed from `resolveWithGateways()`.\\n    /// @return result The encoded response for the requested call.\\n    /// @return resolver The address of the resolver that supplied `result`.\\n    function resolveCallback(\\n        ResolverInfo calldata info,\\n        Lookup[] calldata lookups,\\n        bytes calldata extraData\\n    ) external pure returns (bytes memory result, address resolver) {\\n        bool multi = abi.decode(extraData, (bool));\\n        if (multi) {\\n            bytes[] memory m = new bytes[](lookups.length);\\n            for (uint256 i; i < lookups.length; i++) {\\n                Lookup memory lu = lookups[i];\\n                if ((lu.flags & FLAG_EMPTY_RESPONSE) == 0) {\\n                    m[i] = lookups[i].data;\\n                }\\n            }\\n            result = abi.encode(m);\\n        } else {\\n            result = _requireResponse(lookups[0]);\\n        }\\n        resolver = info.resolver;\\n    }\\n\\n    /// @notice Same as `reverseWithGateways()` but uses default batch gateways.\\n    function reverse(\\n        bytes memory encodedAddress,\\n        uint256 coinType\\n    ) external view returns (string memory, address /* resolver */, address) {\\n        return reverseWithGateways(encodedAddress, coinType, batchGateways);\\n    }\\n\\n    struct ReverseArgs {\\n        bytes encodedAddress;\\n        uint256 coinType;\\n        string[] gateways;\\n    }\\n\\n    /// @notice Performs ENS reverse resolution for the supplied address and coin type.\\n    /// @notice Callers should enable EIP-3668.\\n    /// @dev This function executes over multiple steps (step 1 of 3).\\n    /// @param encodedAddress The input address.\\n    /// @param coinType The coin type.\\n    /// @param gateways The list of batch gateway URLs to use.\\n    function reverseWithGateways(\\n        bytes memory encodedAddress,\\n        uint256 coinType,\\n        string[] memory gateways\\n    ) public view returns (string memory, address /* resolver */, address) {\\n        // https://docs.ens.domains/ensip/19\\n        ResolverInfo memory info = requireResolver(\\n            NameCoder.encode(ENSIP19.reverseName(encodedAddress, coinType)) // reverts EmptyAddress\\n        );\\n        _resolveBatch(\\n            info,\\n            _oneCall(abi.encodeCall(INameResolver.name, (info.node))),\\n            gateways,\\n            this.reverseNameCallback.selector,\\n            abi.encode(ReverseArgs(encodedAddress, coinType, gateways))\\n        );\\n    }\\n\\n    /// @dev CCIP-Read callback for `reverseWithGateways()` (step 2 of 3).\\n    /// @param infoRev The resolver for the reverse name that was called.\\n    /// @param lookups The lookups corresponding to the calls: `[name()]`.\\n    /// @param extraData The contextual data passed from `reverseWithGateways()`.\\n    function reverseNameCallback(\\n        ResolverInfo calldata infoRev,\\n        Lookup[] calldata lookups,\\n        bytes memory extraData // this cannot be calldata due to \\\"stack too deep\\\"\\n    ) external view returns (string memory primary, address, address) {\\n        ReverseArgs memory args = abi.decode(extraData, (ReverseArgs));\\n        primary = abi.decode(_requireResponse(lookups[0]), (string));\\n        if (bytes(primary).length == 0) {\\n            return (\\\"\\\", address(0), infoRev.resolver);\\n        }\\n        ResolverInfo memory info = requireResolver(NameCoder.encode(primary));\\n        _resolveBatch(\\n            info,\\n            _oneCall(\\n                args.coinType == COIN_TYPE_ETH\\n                    ? abi.encodeCall(IAddrResolver.addr, (info.node))\\n                    : abi.encodeCall(\\n                        IAddressResolver.addr,\\n                        (info.node, args.coinType)\\n                    )\\n            ),\\n            args.gateways,\\n            this.reverseAddressCallback.selector,\\n            abi.encode(args.encodedAddress, primary, infoRev.resolver)\\n        );\\n    }\\n\\n    /// @dev CCIP-Read callback for `reverseNameCallback()` (step 3 of 3).\\n    ///      Reverts `ReverseAddressMismatch`.\\n    /// @param info The resolver for the primary name that was called.\\n    /// @param lookups The lookups corresponding to the calls: `[addr()]`.\\n    /// @param extraData The contextual data passed from `reverseNameCallback()`.\\n    /// @return primary The resolved primary name.\\n    /// @return resolver The resolver address for primary name.\\n    /// @return reverseResolver The resolver address for the reverse name.\\n    function reverseAddressCallback(\\n        ResolverInfo calldata info,\\n        Lookup[] calldata lookups,\\n        bytes calldata extraData\\n    )\\n        external\\n        pure\\n        returns (\\n            string memory primary,\\n            address resolver,\\n            address reverseResolver\\n        )\\n    {\\n        bytes memory reverseAddress;\\n        (reverseAddress, primary, reverseResolver) = abi.decode(\\n            extraData,\\n            (bytes, string, address)\\n        );\\n        bytes memory v = _requireResponse(lookups[0]);\\n        bytes memory primaryAddress;\\n        bytes4 selector = bytes4(lookups[0].call);\\n        if (selector == IAddrResolver.addr.selector) {\\n            address addr = abi.decode(v, (address));\\n            primaryAddress = abi.encodePacked(addr);\\n        } else if (selector == IAddressResolver.addr.selector) {\\n            primaryAddress = abi.decode(v, (bytes));\\n        }\\n        if (!BytesUtils.equals(reverseAddress, primaryAddress)) {\\n            revert ReverseAddressMismatch(primary, primaryAddress);\\n        }\\n        resolver = info.resolver;\\n    }\\n\\n    /// @dev Perform multiple resolver calls in parallel using batch gateway.\\n    /// @param info The resolver to call.\\n    /// @param calls The list of resolver calldata, eg. `[addr(), text()]`.\\n    /// @param gateways The list of batch gateway URLs to use.\\n    /// @param callbackFunction The function selector to call after resolution.\\n    /// @param extraData The contextual data passed to `callbackFunction`.\\n    /// @dev The return type of this function is polymorphic depending on the caller.\\n    function _resolveBatch(\\n        ResolverInfo memory info,\\n        bytes[] memory calls,\\n        string[] memory gateways,\\n        bytes4 callbackFunction,\\n        bytes memory extraData\\n    ) internal view {\\n        Batch memory batch = Batch(new Lookup[](calls.length), gateways);\\n        for (uint256 i; i < calls.length; i++) {\\n            Lookup memory lu = batch.lookups[i];\\n            lu.target = info.resolver;\\n            lu.call = info.extended\\n                ? abi.encodeCall(\\n                    IExtendedResolver.resolve,\\n                    (info.name, calls[i])\\n                )\\n                : calls[i];\\n        }\\n        ccipRead(\\n            address(this),\\n            abi.encodeCall(this.ccipBatch, (batch)),\\n            this.resolveBatchCallback.selector,\\n            abi.encode(info, callbackFunction, extraData)\\n        );\\n    }\\n\\n    /// @dev CCIP-Read callback for `_resolveBatch()`.\\n    /// @param response The response data from `CCIPBatcher`.\\n    /// @param extraData The contextual data from `_resolveBatch()`.\\n    function resolveBatchCallback(\\n        bytes calldata response,\\n        bytes calldata extraData\\n    ) external view {\\n        Batch memory batch = abi.decode(response, (Batch));\\n        (\\n            ResolverInfo memory info,\\n            bytes4 callbackFunction_,\\n            bytes memory extraData_\\n        ) = abi.decode(extraData, (ResolverInfo, bytes4, bytes));\\n        if (info.extended) {\\n            for (uint256 i; i < batch.lookups.length; i++) {\\n                Lookup memory lu = batch.lookups[i];\\n                lu.call = _unwrapResolve(lu.call);\\n                if ((lu.flags & FLAGS_ANY_ERROR) == 0) {\\n                    lu.data = abi.decode(lu.data, (bytes));\\n                }\\n            }\\n        }\\n        ccipRead(\\n            address(this),\\n            abi.encodeWithSelector(\\n                callbackFunction_,\\n                info,\\n                batch.lookups,\\n                extraData_\\n            )\\n        );\\n    }\\n\\n    /// @dev Extract `data` from `resolve(bytes, bytes data)` calldata.\\n    /// @param v The `resolve(bytes, bytes data)` calldata.\\n    /// @return data The inner `bytes data` argument.\\n    function _unwrapResolve(\\n        bytes memory v\\n    ) internal pure returns (bytes memory data) {\\n        // resolve(bytes name, bytes data):      | <== offset starts here\\n        // => uint256(length) + bytes4(selector) | offset(name) + offset(data)\\n        //           32       +        4         |      32\\n        assembly {\\n            data := add(v, 36) // location of offset start\\n            data := add(data, mload(add(data, 32))) // += offset(data)\\n        }\\n    }\\n\\n    /// @dev Extract `data` from a lookup or revert an appropriate error.\\n    ///      Reverts if the `data` is not a successful response.\\n    /// @param lu The lookup to extract from.\\n    /// @return v The successful response (always 32+ bytes).\\n    function _requireResponse(\\n        Lookup memory lu\\n    ) internal pure returns (bytes memory v) {\\n        v = lu.data;\\n        if ((lu.flags & FLAG_BATCH_ERROR) != 0) {\\n            assembly {\\n                revert(add(v, 32), mload(v)) // HttpError or Error\\n            }\\n        } else if ((lu.flags & FLAG_CALL_ERROR) != 0) {\\n            if (bytes4(v) == UnsupportedResolverProfile.selector) {\\n                assembly {\\n                    revert(add(v, 32), mload(v))\\n                }\\n            }\\n            revert ResolverError(v); // any error from Resolver\\n        } else if ((lu.flags & FLAG_EMPTY_RESPONSE) != 0) {\\n            revert UnsupportedResolverProfile(bytes4(v)); // initial call or callback was unimplemented\\n        }\\n    }\\n\\n    /// @dev Create an array with one `call`.\\n    /// @param call The single calldata.\\n    /// @return calls The one-element calldata array, eg. `[call]`.\\n    function _oneCall(\\n        bytes memory call\\n    ) internal pure returns (bytes[] memory calls) {\\n        calls = new bytes[](1);\\n        calls[0] = call;\\n    }\\n}\\n\",\"keccak256\":\"0xad413c9c60b1595f38375143ad8c5767ad616777edbbec3541143eff15449b46\",\"license\":\"MIT\"},\"contracts/utils/BytesUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary BytesUtils {\\n    error OffsetOutOfBoundsError(uint256 offset, uint256 length);\\n\\n    /// @dev Returns the keccak-256 hash of a byte range.\\n    /// @param self The byte string to hash.\\n    /// @param offset The position to start hashing at.\\n    /// @param len The number of bytes to hash.\\n    /// @return ret The hash of the byte range.\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /// @dev Returns a positive number if `other` comes lexicographically after\\n    ///      `self`, a negative number if it comes before, or zero if the\\n    ///      contents of the two bytes are equal.\\n    /// @param self The first bytes to compare.\\n    /// @param other The second bytes to compare.\\n    /// @return The result of the comparison.\\n    function compare(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (int256) {\\n        return compare(self, 0, self.length, other, 0, other.length);\\n    }\\n\\n    /// @dev Returns a positive number if `other` comes lexicographically after\\n    ///      `self`, a negative number if it comes before, or zero if the\\n    ///      contents of the two bytes are equal. Comparison is done per-rune,\\n    ///      on unicode codepoints.\\n    /// @param self The first bytes to compare.\\n    /// @param offset The offset of self.\\n    /// @param len    The length of self.\\n    /// @param other The second bytes to compare.\\n    /// @param otheroffset The offset of the other string.\\n    /// @param otherlen    The length of the other string.\\n    /// @return The result of the comparison.\\n    function compare(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len,\\n        bytes memory other,\\n        uint256 otheroffset,\\n        uint256 otherlen\\n    ) internal pure returns (int256) {\\n        if (offset + len > self.length) {\\n            revert OffsetOutOfBoundsError(offset + len, self.length);\\n        }\\n        if (otheroffset + otherlen > other.length) {\\n            revert OffsetOutOfBoundsError(otheroffset + otherlen, other.length);\\n        }\\n\\n        uint256 shortest = len;\\n        if (otherlen < len) shortest = otherlen;\\n\\n        uint256 selfptr;\\n        uint256 otherptr;\\n\\n        assembly {\\n            selfptr := add(self, add(offset, 32))\\n            otherptr := add(other, add(otheroffset, 32))\\n        }\\n        for (uint256 idx = 0; idx < shortest; idx += 32) {\\n            uint256 a;\\n            uint256 b;\\n            assembly {\\n                a := mload(selfptr)\\n                b := mload(otherptr)\\n            }\\n            if (a != b) {\\n                uint256 rest = shortest - idx;\\n                if (rest < 32) {\\n                    // shift out the irrelevant bits\\n                    rest = (32 - rest) << 3; // bits to drop\\n                    a >>= rest;\\n                    b >>= rest;\\n                }\\n                if (a < b) {\\n                    return -1;\\n                } else if (a > b) {\\n                    return 1;\\n                }\\n            }\\n            selfptr += 32;\\n            otherptr += 32;\\n        }\\n\\n        return int256(len) - int256(otherlen);\\n    }\\n\\n    /// @dev Returns true if the two byte ranges are equal.\\n    /// @param self The first byte range to compare.\\n    /// @param offset The offset into the first byte range.\\n    /// @param other The second byte range to compare.\\n    /// @param otherOffset The offset into the second byte range.\\n    /// @param len The number of bytes to compare\\n    /// @return True if the byte ranges are equal, false otherwise.\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset,\\n        uint256 len\\n    ) internal pure returns (bool) {\\n        return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n    }\\n\\n    /// @dev Returns true if the two byte ranges are equal with offsets.\\n    /// @param self The first byte range to compare.\\n    /// @param offset The offset into the first byte range.\\n    /// @param other The second byte range to compare.\\n    /// @param otherOffset The offset into the second byte range.\\n    /// @return True if the byte ranges are equal, false otherwise.\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset\\n    ) internal pure returns (bool) {\\n        return\\n            keccak(self, offset, self.length - offset) ==\\n            keccak(other, otherOffset, other.length - otherOffset);\\n    }\\n\\n    /// @dev Compares a range of 'self' to all of 'other' and returns True iff\\n    ///      they are equal.\\n    /// @param self The first byte range to compare.\\n    /// @param offset The offset into the first byte range.\\n    /// @param other The second byte range to compare.\\n    /// @return True if the byte ranges are equal, false otherwise.\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        return\\n            self.length == offset + other.length &&\\n            equals(self, offset, other, 0, other.length);\\n    }\\n\\n    /// @dev Returns true if the two byte ranges are equal.\\n    /// @param self The first byte range to compare.\\n    /// @param other The second byte range to compare.\\n    /// @return True if the byte ranges are equal, false otherwise.\\n    function equals(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        return\\n            self.length == other.length &&\\n            equals(self, 0, other, 0, self.length);\\n    }\\n\\n    /// @dev Returns the 8-bit number at the specified index of self.\\n    /// @param self The byte string.\\n    /// @param idx The index into the bytes\\n    /// @return ret The specified 8 bits of the string, interpreted as an integer.\\n    function readUint8(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint8 ret) {\\n        return uint8(self[idx]);\\n    }\\n\\n    /// @dev Returns the 16-bit number at the specified index of self.\\n    /// @param self The byte string.\\n    /// @param idx The index into the bytes\\n    /// @return ret The specified 16 bits of the string, interpreted as an integer.\\n    function readUint16(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint16 ret) {\\n        require(idx + 2 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n        }\\n    }\\n\\n    /// @dev Returns the 32-bit number at the specified index of self.\\n    /// @param self The byte string.\\n    /// @param idx The index into the bytes\\n    /// @return ret The specified 32 bits of the string, interpreted as an integer.\\n    function readUint32(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint32 ret) {\\n        require(idx + 4 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n        }\\n    }\\n\\n    /// @dev Returns the 32 byte value at the specified index of self.\\n    /// @param self The byte string.\\n    /// @param idx The index into the bytes\\n    /// @return ret The specified 32 bytes of the string.\\n    function readBytes32(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes32 ret) {\\n        require(idx + 32 <= self.length);\\n        assembly {\\n            ret := mload(add(add(self, 32), idx))\\n        }\\n    }\\n\\n    /// @dev Returns the 32 byte value at the specified index of self.\\n    /// @param self The byte string.\\n    /// @param idx The index into the bytes\\n    /// @return ret The specified 32 bytes of the string.\\n    function readBytes20(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes20 ret) {\\n        require(idx + 20 <= self.length);\\n        assembly {\\n            ret := and(\\n                mload(add(add(self, 32), idx)),\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /// @dev Returns the n byte value at the specified index of self.\\n    /// @param self The byte string.\\n    /// @param idx The index into the bytes.\\n    /// @param len The number of bytes.\\n    /// @return ret The specified 32 bytes of the string.\\n    function readBytesN(\\n        bytes memory self,\\n        uint256 idx,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(len <= 32);\\n        require(idx + len <= self.length);\\n        assembly {\\n            let mask := not(sub(exp(256, sub(32, len)), 1))\\n            ret := and(mload(add(add(self, 32), idx)), mask)\\n        }\\n    }\\n\\n    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint256 mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n\\n    /// @dev Copies a substring into a new byte string.\\n    /// @param self The byte string to copy from.\\n    /// @param offset The offset to start copying at.\\n    /// @param len The number of bytes to copy.\\n    function substring(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes memory) {\\n        require(offset + len <= self.length);\\n\\n        bytes memory ret = new bytes(len);\\n        uint256 dest;\\n        uint256 src;\\n\\n        assembly {\\n            dest := add(ret, 32)\\n            src := add(add(self, 32), offset)\\n        }\\n        memcpy(dest, src, len);\\n\\n        return ret;\\n    }\\n\\n    // Maps characters from 0x30 to 0x7A to their base32 values.\\n    // 0xFF represents invalid characters in that range.\\n    bytes constant base32HexTable =\\n        hex\\\"00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\\\";\\n\\n    /// @dev Decodes unpadded base32 data of up to one word in length.\\n    /// @param self The data to decode.\\n    /// @param off Offset into the string to start at.\\n    /// @param len Number of characters to decode.\\n    /// @return The decoded data, left aligned.\\n    function base32HexDecodeWord(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len\\n    ) internal pure returns (bytes32) {\\n        require(len <= 52);\\n\\n        uint256 ret = 0;\\n        uint8 decoded;\\n        for (uint256 i = 0; i < len; i++) {\\n            bytes1 char = self[off + i];\\n            require(char >= 0x30 && char <= 0x7A);\\n            decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n            require(decoded <= 0x20);\\n            if (i == len - 1) {\\n                break;\\n            }\\n            ret = (ret << 5) | decoded;\\n        }\\n\\n        uint256 bitlen = len * 5;\\n        if (len % 8 == 0) {\\n            // Multiple of 8 characters, no padding\\n            ret = (ret << 5) | decoded;\\n        } else if (len % 8 == 2) {\\n            // Two extra characters - 1 byte\\n            ret = (ret << 3) | (decoded >> 2);\\n            bitlen -= 2;\\n        } else if (len % 8 == 4) {\\n            // Four extra characters - 2 bytes\\n            ret = (ret << 1) | (decoded >> 4);\\n            bitlen -= 4;\\n        } else if (len % 8 == 5) {\\n            // Five extra characters - 3 bytes\\n            ret = (ret << 4) | (decoded >> 1);\\n            bitlen -= 1;\\n        } else if (len % 8 == 7) {\\n            // Seven extra characters - 4 bytes\\n            ret = (ret << 2) | (decoded >> 3);\\n            bitlen -= 3;\\n        } else {\\n            revert();\\n        }\\n\\n        return bytes32(ret << (256 - bitlen));\\n    }\\n\\n    /// @dev Finds the first occurrence of the byte `needle` in `self`.\\n    /// @param self The string to search\\n    /// @param off The offset to start searching at\\n    /// @param len The number of bytes to search\\n    /// @param needle The byte to search for\\n    /// @return The offset of `needle` in `self`, or 2**256-1 if it was not found.\\n    function find(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len,\\n        bytes1 needle\\n    ) internal pure returns (uint256) {\\n        for (uint256 idx = off; idx < off + len; idx++) {\\n            if (self[idx] == needle) {\\n                return idx;\\n            }\\n        }\\n        return type(uint256).max;\\n    }\\n}\\n\",\"keccak256\":\"0x91aa93c6538538518436746a72ed262b677c5216209b7a7f32dbf5f87018ba52\",\"license\":\"MIT\"},\"contracts/utils/ENSIP19.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {HexUtils} from \\\"../utils/HexUtils.sol\\\";\\n\\nuint256 constant COIN_TYPE_ETH = 60;\\nuint256 constant EVM_BIT = 1 << 31;\\n\\n/// @dev Library for generating reverse names according to ENSIP-19.\\n/// https://docs.ens.domains/ensip/19\\nlibrary ENSIP19 {\\n    /// @dev The supplied address was `0x`.\\n    error EmptyAddress();\\n\\n    /// @dev Extract Chain ID from `coinType`.\\n    /// @param coinType The coin type.\\n    /// @return chain The Chain ID or 0 if non-EVM Chain.\\n    function chainFromCoinType(\\n        uint256 coinType\\n    ) internal pure returns (uint32 chain) {\\n        if (coinType == COIN_TYPE_ETH) return 1;\\n        return\\n            uint32(\\n                uint32(coinType) == coinType && (coinType & EVM_BIT) != 0\\n                    ? coinType ^ EVM_BIT\\n                    : 0\\n            );\\n    }\\n\\n    /// @dev Same as `reverseName()` but uses EVM Address + Chain ID.\\n    function reverseName(\\n        address addr,\\n        uint64 chain\\n    ) internal pure returns (string memory) {\\n        return\\n            reverseName(\\n                abi.encodePacked(addr),\\n                chain == 1 ? COIN_TYPE_ETH : chain | EVM_BIT\\n            );\\n    }\\n\\n    /// @dev Generate Reverse Name from Encoded Address + Coin Type.\\n    ///      Reverts `EmptyAddress` if `encodedAddress` is `0x`.\\n    /// @param encodedAddress The input address.\\n    /// @param coinType The coin type.\\n    /// @return name The ENS reverse name, eg. `1234abcd.addr.reverse`.\\n    function reverseName(\\n        bytes memory encodedAddress,\\n        uint256 coinType\\n    ) internal pure returns (string memory name) {\\n        if (encodedAddress.length == 0) revert EmptyAddress();\\n        name = string(\\n            abi.encodePacked(\\n                HexUtils.bytesToHex(encodedAddress),\\n                \\\".\\\",\\n                coinType == COIN_TYPE_ETH\\n                    ? \\\"addr\\\"\\n                    : coinType == EVM_BIT\\n                        ? \\\"default\\\"\\n                        : HexUtils.unpaddedUintToHex(coinType, true),\\n                \\\".reverse\\\"\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x0aeff593a5c722c193942afe90fdad8c620928e60ebd7dc9bd7f64d3c9278ce6\",\"license\":\"MIT\"},\"contracts/utils/HexUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary HexUtils {\\n    /// @dev Attempts to parse bytes32 from a hex string\\n    /// @param str The string to parse\\n    /// @param idx The offset to start parsing at\\n    /// @param lastIdx The (exclusive) last index in `str` to consider. Use `str.length` to scan the whole string.\\n    function hexStringToBytes32(\\n        bytes memory str,\\n        uint256 idx,\\n        uint256 lastIdx\\n    ) internal pure returns (bytes32, bool) {\\n        require(lastIdx - idx <= 64);\\n        (bytes memory r, bool valid) = hexToBytes(str, idx, lastIdx);\\n        if (!valid) {\\n            return (bytes32(0), false);\\n        }\\n        bytes32 ret;\\n        assembly {\\n            ret := shr(mul(4, sub(64, sub(lastIdx, idx))), mload(add(r, 32)))\\n        }\\n        return (ret, true);\\n    }\\n\\n    function hexToBytes(\\n        bytes memory str,\\n        uint256 idx,\\n        uint256 lastIdx\\n    ) internal pure returns (bytes memory r, bool valid) {\\n        uint256 hexLength = lastIdx - idx;\\n        if (hexLength % 2 == 1) {\\n            revert(\\\"Invalid string length\\\");\\n        }\\n        r = new bytes(hexLength / 2);\\n        valid = true;\\n        assembly {\\n            // check that the index to read to is not past the end of the string\\n            if gt(lastIdx, mload(str)) {\\n                revert(0, 0)\\n            }\\n\\n            function getHex(c) -> ascii {\\n                // chars 48-57: 0-9\\n                if and(gt(c, 47), lt(c, 58)) {\\n                    ascii := sub(c, 48)\\n                    leave\\n                }\\n                // chars 65-70: A-F\\n                if and(gt(c, 64), lt(c, 71)) {\\n                    ascii := add(sub(c, 65), 10)\\n                    leave\\n                }\\n                // chars 97-102: a-f\\n                if and(gt(c, 96), lt(c, 103)) {\\n                    ascii := add(sub(c, 97), 10)\\n                    leave\\n                }\\n                // invalid char\\n                ascii := 0xff\\n            }\\n\\n            let ptr := add(str, 32)\\n            for {\\n                let i := idx\\n            } lt(i, lastIdx) {\\n                i := add(i, 2)\\n            } {\\n                let byte1 := getHex(byte(0, mload(add(ptr, i))))\\n                let byte2 := getHex(byte(0, mload(add(ptr, add(i, 1)))))\\n                // if either byte is invalid, set invalid and break loop\\n                if or(eq(byte1, 0xff), eq(byte2, 0xff)) {\\n                    valid := false\\n                    break\\n                }\\n                let combined := or(shl(4, byte1), byte2)\\n                mstore8(add(add(r, 32), div(sub(i, idx), 2)), combined)\\n            }\\n        }\\n    }\\n\\n    /// @dev Attempts to parse an address from a hex string\\n    /// @param str The string to parse\\n    /// @param idx The offset to start parsing at\\n    /// @param lastIdx The (exclusive) last index in `str` to consider. Use `str.length` to scan the whole string.\\n    function hexToAddress(\\n        bytes memory str,\\n        uint256 idx,\\n        uint256 lastIdx\\n    ) internal pure returns (address, bool) {\\n        if (lastIdx - idx < 40) return (address(0x0), false);\\n        (bytes32 r, bool valid) = hexStringToBytes32(str, idx, lastIdx);\\n        return (address(uint160(uint256(r))), valid);\\n    }\\n\\n    /// @dev Format an address as a hex string.\\n    /// @param addr The address to format.\\n    /// @return hexString The corresponding hex string w/o a 0x-prefix.\\n    function addressToHex(\\n        address addr\\n    ) internal pure returns (string memory hexString) {\\n        // return bytesToHex(abi.encodePacked(addr));\\n        hexString = new string(40);\\n        uint256 dst;\\n        assembly {\\n            mstore(0, addr)\\n            dst := add(hexString, 32)\\n        }\\n        unsafeHex(12, dst, 40);\\n    }\\n\\n    /// @dev Format an integer as a variable-length hex string without zero padding.\\n    /// * unpaddedUintToHex(0, true)  = \\\"0\\\"\\n    /// * unpaddedUintToHex(1, true)  = \\\"1\\\"\\n    /// * unpaddedUintToHex(0, false) = \\\"00\\\"\\n    /// * unpaddedUintToHex(1, false) = \\\"01\\\"\\n    /// @param value The number to format.\\n    /// @param dropZeroNibble If true, the leading byte will use one nibble if less than 16.\\n    /// @return hexString The corresponding hex string w/o a 0x-prefix.\\n    function unpaddedUintToHex(\\n        uint256 value,\\n        bool dropZeroNibble\\n    ) internal pure returns (string memory hexString) {\\n        uint256 temp = value;\\n        uint256 shift;\\n        for (uint256 b = 128; b >= 8; b >>= 1) {\\n            if (temp < (1 << b)) {\\n                shift += b; // number of zero upper bits\\n            } else {\\n                temp >>= b; // shift away lower half\\n            }\\n        }\\n        if (dropZeroNibble && temp < 16) shift += 4;\\n        uint256 nibbles = 64 - (shift >> 2);\\n        hexString = new string(nibbles);\\n        uint256 dst;\\n        assembly {\\n            mstore(0, shl(shift, value)) // left-align\\n            dst := add(hexString, 32)\\n        }\\n        unsafeHex(0, dst, nibbles);\\n    }\\n\\n    /// @dev Format bytes as a hex string.\\n    /// @param v The bytes to format.\\n    /// @return hexString The corresponding hex string w/o a 0x-prefix.\\n    function bytesToHex(\\n        bytes memory v\\n    ) internal pure returns (string memory hexString) {\\n        uint256 nibbles = v.length << 1;\\n        hexString = new string(nibbles);\\n        uint256 src;\\n        uint256 dst;\\n        assembly {\\n            src := add(v, 32)\\n            dst := add(hexString, 32)\\n        }\\n        unsafeHex(src, dst, nibbles);\\n    }\\n\\n    /// @dev Converts arbitrary memory to a hex string.\\n    /// @param src The memory offset of first nibble of input.\\n    /// @param dst The memory offset of first hex-char of output.\\n    /// @param nibbles The number of nibbles to convert and the byte-length of the output.\\n    function unsafeHex(\\n        uint256 src,\\n        uint256 dst,\\n        uint256 nibbles\\n    ) internal pure {\\n        unchecked {\\n            for (uint256 end = dst + nibbles; dst < end; src += 32) {\\n                uint256 word;\\n                assembly {\\n                    word := mload(src)\\n                }\\n                for (uint256 shift = 256; dst < end && shift > 0; dst++) {\\n                    uint256 b = (word >> (shift -= 4)) & 15; // each nibble\\n                    b = b < 10 ? b + 0x30 : b + 0x57; // (\\\"a\\\" - 10) => 0x57\\n                    assembly {\\n                        mstore8(dst, b)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdabfeb00a2bdc34233955d2a43ceead3bbbda6198e93889898028e31bea89d69\",\"license\":\"MIT\"},\"contracts/utils/NameCoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {HexUtils} from \\\"../utils/HexUtils.sol\\\";\\n\\n/// @dev Library for encoding/decoding names.\\n///\\n/// An ENS name is stop-separated labels, eg. \\\"aaa.bb.c\\\".\\n///\\n/// A DNS-encoded name is composed of byte length-prefixed labels with a terminator byte.\\n/// eg. \\\"\\\\x03aaa\\\\x02bb\\\\x01c\\\\x00\\\".\\n/// - maximum label length is 255 bytes.\\n/// - length = 0 is reserved for the terminator (root).\\n///\\n/// To encode a label larger than 255 bytes, use a hashed label.\\n/// A label of any length can be converted to a hashed label.\\n///\\n/// A hashed label is encoded as \\\"[\\\" + toHex(keccak256(label)) + \\\"]\\\".\\n/// eg. [af2caa1c2ca1d027f1ac823b529d0a67cd144264b2789fa2ea4d63a67c7103cc] = \\\"vitalik\\\".\\n/// - always 66 bytes.\\n/// - matches: `/^\\\\[[0-9a-f]{64}\\\\]$/`.\\n///\\n/// w/o hashed labels: `dns.length == 2 + ens.length` and the mapping is injective.\\n///  w/ hashed labels: `dns.length == 2 + ens.split('.').map(x => x.utf8Length).sum(n => n > 255 ? 66 : n)`.\\nlibrary NameCoder {\\n    /// @dev The DNS-encoded name is malformed.\\n    error DNSDecodingFailed(bytes dns);\\n\\n    /// @dev A label of the ENS name has an invalid size.\\n    error DNSEncodingFailed(string ens);\\n\\n    /// @dev Same as `BytesUtils.readLabel()` but supports hashed labels.\\n    ///      Only the last labelHash is zero.\\n    ///      Disallows hashed label of zero (eg. `[0..0]`) to prevent confusion with terminator.\\n    ///      Reverts `DNSDecodingFailed`.\\n    /// @param name The DNS-encoded name.\\n    /// @param idx The offset into `name` to start reading.\\n    /// @return labelHash The resulting labelhash.\\n    /// @return newIdx The offset into `name` of the next label.\\n    function readLabel(\\n        bytes memory name,\\n        uint256 idx\\n    ) internal pure returns (bytes32 labelHash, uint256 newIdx) {\\n        if (idx >= name.length) revert DNSDecodingFailed(name); // \\\"readLabel: expected length\\\"\\n        uint256 len = uint256(uint8(name[idx++]));\\n        newIdx = idx + len;\\n        if (newIdx > name.length) revert DNSDecodingFailed(name); // \\\"readLabel: expected label\\\"\\n        if (len == 66 && name[idx] == \\\"[\\\" && name[newIdx - 1] == \\\"]\\\") {\\n            bool valid;\\n            (labelHash, valid) = HexUtils.hexStringToBytes32(\\n                name,\\n                idx + 1,\\n                newIdx - 1\\n            ); // will not revert\\n            if (!valid || labelHash == bytes32(0)) {\\n                revert DNSDecodingFailed(name); // \\\"readLabel: malformed\\\" or null literal\\n            }\\n        } else if (len > 0) {\\n            assembly {\\n                labelHash := keccak256(add(add(name, idx), 32), len)\\n            }\\n        }\\n    }\\n\\n    /// @dev Same as `BytesUtils.namehash()` but supports hashed labels.\\n    ///      Reverts `DNSDecodingFailed`.\\n    /// @param name The DNS-encoded name.\\n    /// @param idx The offset into name start hashing.\\n    /// @return hash The resulting namehash.\\n    function namehash(\\n        bytes memory name,\\n        uint256 idx\\n    ) internal pure returns (bytes32 hash) {\\n        (hash, idx) = readLabel(name, idx);\\n        if (hash == bytes32(0)) {\\n            if (idx != name.length) revert DNSDecodingFailed(name); // \\\"namehash: Junk at end of name\\\"\\n        } else {\\n            bytes32 parent = namehash(name, idx);\\n            assembly {\\n                mstore(0, parent)\\n                mstore(32, hash)\\n                hash := keccak256(0, 64)\\n            }\\n        }\\n    }\\n\\n    /// @dev Convert DNS-encoded name to ENS name.\\n    ///      Reverts `DNSDecodingFailed`.\\n    /// @param dns The DNS-encoded name to convert, eg. `\\\\x03aaa\\\\x02bb\\\\x01c\\\\x00`.\\n    /// @return ens The equivalent ENS name, eg. `aaa.bb.c`.\\n    function decode(\\n        bytes memory dns\\n    ) internal pure returns (string memory ens) {\\n        unchecked {\\n            uint256 n = dns.length;\\n            if (n == 1 && dns[0] == 0) return \\\"\\\"; // only valid answer is root\\n            if (n < 3) revert DNSDecodingFailed(dns);\\n            bytes memory v = new bytes(n - 2); // always 2-shorter\\n            uint256 src;\\n            uint256 dst;\\n            while (src < n) {\\n                uint8 len = uint8(dns[src++]);\\n                if (len == 0) break;\\n                uint256 end = src + len;\\n                if (end > dns.length) revert DNSDecodingFailed(dns); // overflow\\n                if (dst > 0) v[dst++] = \\\".\\\"; // skip first stop\\n                while (src < end) {\\n                    bytes1 x = dns[src++]; // read byte\\n                    if (x == \\\".\\\") revert DNSDecodingFailed(dns); // malicious label\\n                    v[dst++] = x; // write byte\\n                }\\n            }\\n            if (src != dns.length) revert DNSDecodingFailed(dns); // junk at end\\n            return string(v);\\n        }\\n    }\\n\\n    /// @dev Convert ENS name to DNS-encoded name.\\n    ///      Hashes labels longer than 255 bytes.\\n    ///      Reverts `DNSEncodingFailed`.\\n    /// @param ens The ENS name to convert, eg. `aaa.bb.c`.\\n    /// @return dns The corresponding DNS-encoded name, eg. `\\\\x03aaa\\\\x02bb\\\\x01c\\\\x00`.\\n    function encode(\\n        string memory ens\\n    ) internal pure returns (bytes memory dns) {\\n        unchecked {\\n            uint256 n = bytes(ens).length;\\n            if (n == 0) return hex\\\"00\\\"; // root\\n            dns = new bytes(n + 2);\\n            uint256 start;\\n            assembly {\\n                start := add(dns, 32) // first byte of output\\n            }\\n            uint256 end = start; // remember position to write length\\n            for (uint256 i; i < n; i++) {\\n                bytes1 x = bytes(ens)[i]; // read byte\\n                if (x == \\\".\\\") {\\n                    start = _createHashedLabel(start, end);\\n                    if (start == 0) revert DNSEncodingFailed(ens);\\n                    end = start; // jump to next position\\n                } else {\\n                    assembly {\\n                        end := add(end, 1) // increase length\\n                        mstore(end, x) // write byte\\n                    }\\n                }\\n            }\\n            start = _createHashedLabel(start, end);\\n            if (start == 0) revert DNSEncodingFailed(ens);\\n            assembly {\\n                mstore8(start, 0) // terminal byte\\n                mstore(dns, sub(start, add(dns, 31))) // truncate length\\n            }\\n        }\\n    }\\n\\n    /// @dev Write the label length.\\n    ///      If longer than 255, writes a hashed label instead.\\n    /// @param start The memory offset of the length-prefixed label.\\n    /// @param end The memory offset at the end of the label.\\n    /// @return next The memory offset for the next label.\\n    ///              Returns 0 if label is empty (handled by caller).\\n    function _createHashedLabel(\\n        uint256 start,\\n        uint256 end\\n    ) internal pure returns (uint256 next) {\\n        uint256 size = end - start; // length of label\\n        if (size > 255) {\\n            assembly {\\n                mstore(0, keccak256(add(start, 1), size)) // compute hash of label\\n            }\\n            HexUtils.unsafeHex(0, start + 2, 64); // override label with hex(hash)\\n            assembly {\\n                mstore8(add(start, 1), 0x5B) // \\\"[\\\"\\n                mstore8(add(start, 66), 0x5D) // \\\"]\\\"\\n            }\\n            size = 66;\\n        }\\n        if (size > 0) {\\n            assembly {\\n                mstore8(start, size) // update length\\n            }\\n            next = start + 1 + size; // advance\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8fd7af9cec38612e8041c13d4c3eb9c11fccdcbed4fac40020a4b84672f0aa85\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200468a3803806200468a8339810160408190526200003491620001da565b6200003f336200006a565b6001600160a01b038216608052805162000061906001906020840190620000ba565b5050506200049c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805482825590600052602060002090810192821562000105579160200282015b82811115620001055782518290620000f49082620003d0565b5091602001919060010190620000db565b506200011392915062000117565b5090565b80821115620001135760006200012e828262000138565b5060010162000117565b508054620001469062000341565b6000825580601f1062000157575050565b601f0160209004906000526020600020908101906200017791906200017a565b50565b5b808211156200011357600081556001016200017b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620001d257620001d262000191565b604052919050565b6000806040808486031215620001ef57600080fd5b83516001600160a01b03811681146200020757600080fd5b602085810151919450906001600160401b03808211156200022757600080fd5b8187019150601f88818401126200023d57600080fd5b82518281111562000252576200025262000191565b8060051b62000263868201620001a7565b918252848101860191868101908c8411156200027e57600080fd5b87870192505b838310156200032e578251868111156200029e5760008081fd5b8701603f81018e13620002b15760008081fd5b8881015187811115620002c857620002c862000191565b620002db818801601f19168b01620001a7565b8181528f8c838501011115620002f15760008081fd5b60005b8281101562000311578381018d01518282018d01528b01620002f4565b5060009181018b0191909152835250918701919087019062000284565b8099505050505050505050509250929050565b600181811c908216806200035657607f821691505b6020821081036200037757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003cb57600081815260208120601f850160051c81016020861015620003a65750805b601f850160051c820191505b81811015620003c757828155600101620003b2565b5050505b505050565b81516001600160401b03811115620003ec57620003ec62000191565b6200040481620003fd845462000341565b846200037d565b602080601f8311600181146200043c5760008415620004235750858301515b600019600386901b1c1916600185901b178555620003c7565b600085815260208120601f198616915b828110156200046d578886015182559484019460019091019084016200044c565b50858210156200048c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6080516141cb620004bf600039600081816102100152611e3201526141cb6000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c80639f28e99d116100cd578063b7d6ca6411610081578063d0d444a911610066578063d0d444a914610353578063ef46c0b814610366578063f2fde38b1461037957600080fd5b8063b7d6ca6414610320578063c285238a1461033357600080fd5b8063a1472844116100b2578063a1472844146102c2578063a1cbcbaf146102d5578063b536af761461030d57600080fd5b80639f28e99d1461028f578063a072a4fb146102af57600080fd5b8063715018a6116101245780638708f498116101095780638708f4981461024a5780638da5cb5b1461025d5780639061b9231461026e57600080fd5b8063715018a6146102035780637b1039991461020b57600080fd5b8063491fc4f911610155578063491fc4f9146101b95780635c016c16146101ce5780635d78a217146101e157600080fd5b806301ffc9a714610171578063039128c014610199575b600080fd5b61018461017f366004612abf565b61038c565b60405190151581526020015b60405180910390f35b6101ac6101a7366004612adc565b6103dc565b6040516101909190612b45565b6101cc6101c7366004612ba1565b610488565b005b6101cc6101dc366004612dcd565b6105a1565b6101f46101ef366004612e02565b6105c0565b60405161019093929190612e47565b6101cc6106af565b6102327f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610190565b6101f4610258366004612ed7565b6106c3565b6000546001600160a01b0316610232565b61028161027c366004612ba1565b6108ab565b604051610190929190612f65565b6102a261029d36600461304e565b61099a565b6040516101909190613230565b6102816102bd366004613272565b610ba1565b6102816102d0366004613307565b610d4e565b6102e86102e336600461339b565b610e71565b604080516001600160a01b039094168452602084019290925290820152606001610190565b6102a261031b366004612ba1565b610e8e565b6101f461032e3660046133d0565b61111d565b61034661034136600461339b565b6111df565b6040516101909190613491565b6101f4610361366004613272565b6112f6565b6101cc6103743660046134a4565b611495565b6101cc610387366004613508565b611517565b60007fcd191b34000000000000000000000000000000000000000000000000000000006001600160e01b0319831614806103d657506301ffc9a760e01b6001600160e01b03198316145b92915050565b600181815481106103ec57600080fd5b90600052602060002001600091509050805461040790613525565b80601f016020809104026020016040519081016040528092919081815260200182805461043390613525565b80156104805780601f1061045557610100808354040283529160200191610480565b820191906000526020600020905b81548152906001019060200180831161046357829003601f168201915b505050505081565b60006104968486018661304e565b9050600080806104a885870187613569565b9250925092508260800151156105425760005b845151811015610540576000856000015182815181106104dd576104dd613639565b602002602001015190506104fb816020015160448101510160240190565b60208201526060810151600e1660000361052d578060400151806020019051810190610527919061369c565b60408201525b5080610538816136e7565b9150506104bb565b505b61059730838587600001518560405160240161056093929190613700565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526115a7565b5050505050505050565b6105a96115c6565b80516105bc9060019060208401906129e9565b5050565b60606000806106a185856001805480602002602001604051908101604052809291908181526020016000905b8282101561069857838290600052602060002001805461060b90613525565b80601f016020809104026020016040519081016040528092919081815260200182805461063790613525565b80156106845780601f1061065957610100808354040283529160200191610684565b820191906000526020600020905b81548152906001019060200180831161066757829003601f168201915b5050505050815260200190600101906105ec565b5050505061111d565b9250925092505b9250925092565b6106b76115c6565b6106c16000611620565b565b60606000806000848060200190518101906106de91906137c3565b9050610716878760008181106106f6576106f6613639565b90506020028101906107089190613874565b61071190613894565b611688565b806020019051810190610729919061369c565b9350835160000361076457600061074660808a0160608b01613508565b604051806020016040528060008152509190935093509350506108a1565b600061077261034186611747565b905061089e81610852603c8560200151146107f357836040015185602001516040516024016107ab929190918252602082015260400190565b60408051601f198184030181529190526020810180516001600160e01b03167ff1cb7e06000000000000000000000000000000000000000000000000000000001790526118a1565b836040015160405160240161080a91815260200190565b60408051601f198184030181529190526020810180516001600160e01b03167f3b3b57de000000000000000000000000000000000000000000000000000000001790526118a1565b846040015163d0d444a960e01b86600001518a8f60600160208101906108789190613508565b60405160200161088a939291906138a0565b6040516020818303038152906040526118f3565b50505b9450945094915050565b6060600061098d868686866001805480602002602001604051908101604052809291908181526020016000905b828210156109845783829060005260206000200180546108f790613525565b80601f016020809104026020016040519081016040528092919081815260200182805461092390613525565b80156109705780601f1061094557610100808354040283529160200191610970565b820191906000526020600020905b81548152906001019060200180831161095357829003601f168201915b5050505050815260200190600101906108d8565b50505050610d4e565b9150915094509492505050565b604080518082019091526060808252602082015260005b825151811015610b93576000836000015182815181106109d3576109d3613639565b602002602001015190506020601017816060015116600003610a9b5760006109fe8260000151611af2565b610a09576010610a0c565b60205b9050825b855151811015610a985782600001516001600160a01b031686600001518281518110610a3e57610a3e613639565b6020026020010151600001516001600160a01b031603610a86578186600001518281518110610a6f57610a6f613639565b602002602001015160600181815117915081815250505b80610a90816136e7565b915050610a10565b50505b600060208260600151166000149050600080610ac1831585600001518660200151611b27565b915091508180610ad85750828015610ad857508051155b15610b395760608401805160401790528051600003610b34578360200151610aff906138df565b6040516001600160e01b0319909116602082015260240160408051601f19818403018152919052606085018051600817905290505b610b75565b630556f18360e41b610b4a826138df565b6001600160e01b03191603610b69576060840180516001179052610b75565b60608401805160421790525b60409093019290925250819050610b8b816136e7565b9150506109b1565b50610b9d82611ba0565b5090565b6060600080610bb284860186613913565b90508015610d185760008667ffffffffffffffff811115610bd557610bd5612c0d565b604051908082528060200260200182016040528015610c0857816020015b6060815260200190600190039081610bf35790505b50905060005b87811015610cef576000898983818110610c2a57610c2a613639565b9050602002810190610c3c9190613874565b610c4590613894565b90506008816060015116600003610cdc57898983818110610c6857610c68613639565b9050602002810190610c7a9190613874565b610c8890604081019061392e565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505085518692508591508110610cd057610cd0613639565b60200260200101819052505b5080610ce7816136e7565b915050610c0e565b5080604051602001610d019190613975565b604051602081830303815290604052935050610d31565b610d2e878760008181106106f6576106f6613639565b92505b610d416080890160608a01613508565b9150509550959350505050565b60606000807fac9650d800000000000000000000000000000000000000000000000000000000610d7e86886139d7565b6001600160e01b031916149050610e66610dcd89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111df92505050565b82610e1657610e1188888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506118a192505050565b610e30565b610e23876004818b613a07565b810190610e309190613ab1565b60408051851515602082015288917fa072a4fb00000000000000000000000000000000000000000000000000000000910161088a565b509550959350505050565b6000806000610e81846000611d9d565b9250925092509193909250565b6040805180820190915260608082526020820152600080610eb186880188613ae6565b915091508051825114610ed75760405163252e18f560e11b815260040160405180910390fd5b610ee38486018661304e565b92506000805b8451518110156110e757600085600001518281518110610f0b57610f0b613639565b6020026020010151905060408160600151166000036110d45783518310156110c8576000848481518110610f4157610f41613639565b60200260200101519050858481518110610f5d57610f5d613639565b602002602001015115610f7a5760608201805160441790526110c2565b6000610f898360400151611eda565b9050600081600001516001600160a01b03168260600151848460800151604051602401610fb7929190613b9c565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610ff59190613bc1565b600060405180830381855afa9150503d8060008114611030576040519150601f19603f3d011682016040523d82523d6000602084013e611035565b606091505b50935090508015611093576060840180516040179052825160000361108e5760608201516040516001600160e01b0319909116602082015260240160408051601f19818403018152919052606085018051600817905292505b6110bf565b630556f18360e41b6110a4846138df565b6001600160e01b031916146110bf5760608401805160421790525b50505b60408201525b6110d1836136e7565b92505b50806110df816136e7565b915050610ee9565b50815181146111095760405163252e18f560e11b815260040160405180910390fd5b61111284611ba0565b505050949350505050565b606060008060006111396103416111348989611f24565b611747565b90506111d5816111a1836040015160405160240161115991815260200190565b60408051601f198184030181529190526020810180516001600160e01b03167f691f3431000000000000000000000000000000000000000000000000000000001790526118a1565b87638708f49860e01b60405180606001604052808d81526020018c81526020018b81525060405160200161088a9190613bd3565b5093509350939050565b6040805160a081018252600060208201819052918101829052606081018290526080810182905282815290611215908390611d9d565b602084015260408301526001600160a01b0316606082018190526112575781604051630ee413fd60e31b815260040161124e9190612b45565b60405180910390fd5b61126c8160600151639061b92360e01b612027565b1561127d5760016080820152919050565b6020810151156112a25781604051630ee413fd60e31b815260040161124e9190612b45565b80606001516001600160a01b03163b6000036112f15760608101516040517f1e9535f200000000000000000000000000000000000000000000000000000000815261124e918491600401612f65565b919050565b60606000808261130885870187613c16565b909550925090506000611324898983816106f6576106f6613639565b9050606060008a8a600081811061133d5761133d613639565b905060200281019061134f9190613874565b61135d90602081019061392e565b611366916139d7565b90507fc4c4a822000000000000000000000000000000000000000000000000000000006001600160e01b03198216016113e8576000838060200190518101906113af9190613c8e565b6040516bffffffffffffffffffffffff19606083901b166020820152909150603401604051602081830303815290604052925050611430565b7f0e3481fa000000000000000000000000000000000000000000000000000000006001600160e01b0319821601611430578280602001905181019061142d919061369c565b91505b61143a84836120b0565b6114745786826040517fef9c03ce00000000000000000000000000000000000000000000000000000000815260040161124e929190613b9c565b61148460808d0160608e01613508565b955050505050955095509592505050565b6000818060200190518101906114ab9190613cb6565b9050611512816000015182602001518584604001516040516024016114d1929190613b9c565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152606084015160808501516120d5565b505050565b61151f6115c6565b6001600160a01b03811661159b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161124e565b6115a481611620565b50565b6105bc8282600060e01b604051806020016040528060008152506120d5565b6000546001600160a01b031633146106c15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161124e565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60408101516060820151600416156116a257805160208201fd5b60608201516002161561170b57637b1c461b60e01b6116c0826138df565b6001600160e01b031916036116d757805160208201fd5b806040517f95c0c75200000000000000000000000000000000000000000000000000000000815260040161124e9190612b45565b6060820151600816156112f157611721816138df565b604051637b1c461b60e01b81526001600160e01b0319909116600482015260240161124e565b80516060906000819003611771575050604080518082019091526001815260006020820152919050565b8060020167ffffffffffffffff81111561178d5761178d612c0d565b6040519080825280601f01601f1916602001820160405280156117b7576020820181803683370190505b509150602082018060005b8381101561185d5760008682815181106117de576117de613639565b01602001517fff00000000000000000000000000000000000000000000000000000000000000169050601760f91b81900361184a5761181d8484612289565b9350836000036118425786604051639a4c3e3b60e01b815260040161124e9190612b45565b839250611854565b6001830192508083525b506001016117c2565b506118688282612289565b91508160000361188d5784604051639a4c3e3b60e01b815260040161124e9190612b45565b60008253601f840182038452505050919050565b604080516001808252818301909252606091816020015b60608152602001906001900390816118b857905050905081816000815181106118e3576118e3613639565b6020026020010181905250919050565b60006040518060400160405280865167ffffffffffffffff81111561191a5761191a612c0d565b60405190808252806020026020018201604052801561197f57816020015b61196c604051806080016040528060006001600160a01b031681526020016060815260200160608152602001600081525090565b8152602001906001900390816119385790505b508152602001859052905060005b8551811015611a67576000826000015182815181106119ae576119ae613639565b602090810291909101015160608901516001600160a01b0316815260808901519091506119f4578682815181106119e7576119e7613639565b6020026020010151611a4f565b8760000151878381518110611a0b57611a0b613639565b6020026020010151604051602401611a24929190613b9c565b60408051601f198184030181529190526020810180516001600160e01b0316639061b92360e01b1790525b60209091015280611a5f816136e7565b91505061198d565b50611aea30306001600160a01b0316639f28e99d84604051602401611a8c9190613230565b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505063491fc4f960e01b898787604051602001611ad693929190613d7e565b6040516020818303038152906040526120d5565b505050505050565b6000306001600160a01b03831603611b0c57506001919050565b6113885a6000806000808786fa50815a909103109392505050565b60006060836001600160a01b031685611b425761c350611b44565b5a5b84604051611b529190613bc1565b6000604051808303818686fa925050503d8060008114611b8e576040519150601f19603f3d011682016040523d82523d6000602084013e611b93565b606091505b5090969095509350505050565b80515160009067ffffffffffffffff811115611bbe57611bbe612c0d565b604051908082528060200260200182016040528015611c1c57816020015b611c09604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b815260200190600190039081611bdc5790505b5090506000805b835151811015611cdd57600084600001518281518110611c4557611c45613639565b602002602001015190506040816060015116600003611cca576000611c6d8260400151611eda565b9050604051806060016040528082600001516001600160a01b03168152602001826020015181526020018260400151815250858580611cab906136e7565b965081518110611cbd57611cbd613639565b6020026020010181905250505b5080611cd5816136e7565b915050611c23565b5080156115125780825230836020015183604051602401611cfe9190613db3565b60408051601f19818403018152918152602080830180516001600160e01b03167fa780bab60000000000000000000000000000000000000000000000000000000017905290517fb536af760000000000000000000000000000000000000000000000000000000091611d7291899101613230565b60408051601f1981840301815290829052630556f18360e41b825261124e9594939291600401613e4d565b6000806000806000611daf87876122fe565b90925090508115611ed1576000806000611dc98a85611d9d565b9250925092508185604051602001611deb929190918252602082015260400190565b60408051808303601f190181529082905280516020909101207f0178b8bf0000000000000000000000000000000000000000000000000000000082526004820181905297507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630178b8bf90602401602060405180830381865afa158015611e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea59190613c8e565b97506001600160a01b038816611ebd57828782611ec1565b87878a5b97509750975050505050506106a8565b50509250925092565b6040805160a08101825260008082526060602083018190529282018390528282015260808101919091526103d6611f1f836004808651611f1a9190613eb1565b6124c8565b61254a565b60608251600003611f61576040517f7138356f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611f6a836125b6565b603c8314611fc85763800000008314611f8d57611f8883600161261f565b611fff565b6040518060400160405280600781526020017f64656661756c7400000000000000000000000000000000000000000000000000815250611fff565b6040518060400160405280600481526020017f61646472000000000000000000000000000000000000000000000000000000008152505b604051602001612010929190613ec4565b604051602081830303815290604052905092915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180516001600160e01b03166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015612099575060208210155b80156120a55750600081115b979650505050505050565b6000815183511480156120ce57506120ce83600084600087516126f6565b9392505050565b6000806120eb6120e487611af2565b8787611b27565b91509150811580156121155750630556f18360e41b612109826138df565b6001600160e01b031916145b156121b557600061212582611eda565b9050866001600160a01b031681600001516001600160a01b0316036121b357308160200151826040015163ef46c0b860e01b6040518060a001604052808c6001600160a01b0316815260200186606001516001600160e01b0319168152602001866080015181526020018a6001600160e01b031916815260200189815250604051602001611d729190613f2a565b505b8180156121cb57506001600160e01b0319841615155b1561227357306001600160a01b03168482856040516024016121ee929190613b9c565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161222c9190613bc1565b600060405180830381855afa9150503d8060008114612267576040519150601f19603f3d011682016040523d82523d6000602084013e61226c565b606091505b5090925090505b811561228157805160208201f35b805160208201fd5b6000806122968484613eb1565b905060ff8111156122d5578060018501206000526122c360008560026122bc9190613f9b565b6040612719565b605b6001850153605d60428501535060425b80156122f757808453806122ea856001613f9b565b6122f49190613f9b565b91505b5092915050565b60008083518310612324578360405163ba4adc2360e01b815260040161124e9190612b45565b60008484612331816136e7565b95508151811061234357612343613639565b016020015160f81c90506123578185613f9b565b9150845182111561237d578460405163ba4adc2360e01b815260040161124e9190612b45565b8060421480156123e5575084848151811061239a5761239a613639565b6020910101517fff00000000000000000000000000000000000000000000000000000000000000167f5b00000000000000000000000000000000000000000000000000000000000000145b80156124535750846123f8600184613eb1565b8151811061240857612408613639565b6020910101517fff00000000000000000000000000000000000000000000000000000000000000167f5d00000000000000000000000000000000000000000000000000000000000000145b156124af57600061247986612469876001613f9b565b612474600187613eb1565b612783565b9094509050801580612489575083155b156124a9578560405163ba4adc2360e01b815260040161124e9190612b45565b506124c0565b80156124c057806020858701012092505b509250929050565b82516060906124d78385613f9b565b11156124e257600080fd5b60008267ffffffffffffffff8111156124fd576124fd612c0d565b6040519080825280601f01601f191660200182016040528015612527576020820181803683370190505b5090506020808201908686010161253f8282876127e1565b509095945050505050565b6040805160a0810182526000808252606060208301819052928201839052828201526080810191909152818060200190518101906125889190613fae565b60808601526001600160e01b0319166060850152604084015260208301526001600160a01b03168152919050565b805160609060011b8067ffffffffffffffff8111156125d7576125d7612c0d565b6040519080825280601f01601f191660200182016040528015612601576020820181803683370190505b5091506020838101908301612617828285612719565b505050919050565b606082600060805b60088110612658576001811b83101561264b576126448183613f9b565b9150612650565b91821c915b60011c612627565b508380156126665750601082105b1561267957612676600482613f9b565b90505b600061268a600283901c6040613eb1565b90508067ffffffffffffffff8111156126a5576126a5612c0d565b6040519080825280601f01601f1916602001820160405280156126cf576020820181803683370190505b509350600086831b6000526020850190506126ec60008284612719565b5050505092915050565b6000612703848484612837565b61270e878785612837565b149695505050505050565b8181015b8083101561277d5783516101005b828510801561273a5750600081115b156127705760031901600f82821c16600a811061275a578060570161275f565b806030015b90508086535060019094019361272b565b505060208401935061271d565b50505050565b60008060406127928585613eb1565b111561279d57600080fd5b6000806127ab87878761285b565b91509150806127c35750600092508291506127d99050565b50602001516004858503604003021c9150600190505b935093915050565b6020811061281957815183526127f8602084613f9b565b9250612805602083613f9b565b9150612812602082613eb1565b90506127e1565b905182516020929092036101000a6000190180199091169116179052565b82516000906128468385613f9b565b111561285157600080fd5b5091016020012090565b606060008061286a8585613eb1565b9050612877600282614067565b6001036128c65760405162461bcd60e51b815260206004820152601560248201527f496e76616c696420737472696e67206c656e6774680000000000000000000000604482015260640161124e565b6128d160028261407b565b67ffffffffffffffff8111156128e9576128e9612c0d565b6040519080825280601f01601f191660200182016040528015612913576020820181803683370190505b50925060019150855184111561292857600080fd5b612979565b6000603a8210602f831116156129455750602f190190565b6047821060408311161561295b57506036190190565b6067821060608311161561297157506056190190565b5060ff919050565b60208601855b858110156129de576129968183015160001a61292d565b6129a86001830184015160001a61292d565b60ff811460ff831417156129c1576000955050506129de565b60049190911b17806002898403048701602001535060020161297f565b505050935093915050565b828054828255906000526020600020908101928215612a2f579160200282015b82811115612a2f5782518290612a1f90826140d5565b5091602001919060010190612a09565b50610b9d9291505b80821115610b9d576000612a4b8282612a54565b50600101612a37565b508054612a6090613525565b6000825580601f10612a70575050565b601f0160209004906000526020600020908101906115a491905b80821115610b9d5760008155600101612a8a565b6001600160e01b0319811681146115a457600080fd5b80356112f181612a9e565b600060208284031215612ad157600080fd5b81356120ce81612a9e565b600060208284031215612aee57600080fd5b5035919050565b60005b83811015612b10578181015183820152602001612af8565b50506000910152565b60008151808452612b31816020860160208601612af5565b601f01601f19169290920160200192915050565b6020815260006120ce6020830184612b19565b60008083601f840112612b6a57600080fd5b50813567ffffffffffffffff811115612b8257600080fd5b602083019150836020828501011115612b9a57600080fd5b9250929050565b60008060008060408587031215612bb757600080fd5b843567ffffffffffffffff80821115612bcf57600080fd5b612bdb88838901612b58565b90965094506020870135915080821115612bf457600080fd5b50612c0187828801612b58565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612c4657612c46612c0d565b60405290565b60405160a0810167ffffffffffffffff81118282101715612c4657612c46612c0d565b604051601f8201601f1916810167ffffffffffffffff81118282101715612c9857612c98612c0d565b604052919050565b600067ffffffffffffffff821115612cba57612cba612c0d565b5060051b60200190565b600067ffffffffffffffff821115612cde57612cde612c0d565b50601f01601f191660200190565b600082601f830112612cfd57600080fd5b8135612d10612d0b82612cc4565b612c6f565b818152846020838601011115612d2557600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112612d5357600080fd5b81356020612d63612d0b83612ca0565b82815260059290921b84018101918181019086841115612d8257600080fd5b8286015b84811015612dc257803567ffffffffffffffff811115612da65760008081fd5b612db48986838b0101612cec565b845250918301918301612d86565b509695505050505050565b600060208284031215612ddf57600080fd5b813567ffffffffffffffff811115612df657600080fd5b6122f484828501612d42565b60008060408385031215612e1557600080fd5b823567ffffffffffffffff811115612e2c57600080fd5b612e3885828601612cec565b95602094909401359450505050565b606081526000612e5a6060830186612b19565b6001600160a01b0394851660208401529290931660409091015292915050565b600060a08284031215612e8c57600080fd5b50919050565b60008083601f840112612ea457600080fd5b50813567ffffffffffffffff811115612ebc57600080fd5b6020830191508360208260051b8501011115612b9a57600080fd5b60008060008060608587031215612eed57600080fd5b843567ffffffffffffffff80821115612f0557600080fd5b612f1188838901612e7a565b95506020870135915080821115612f2757600080fd5b612f3388838901612e92565b90955093506040870135915080821115612f4c57600080fd5b50612f5987828801612cec565b91505092959194509250565b604081526000612f786040830185612b19565b90506001600160a01b03831660208301529392505050565b6001600160a01b03811681146115a457600080fd5b600060808284031215612fb757600080fd5b6040516080810167ffffffffffffffff8282108183111715612fdb57612fdb612c0d565b8160405282935084359150612fef82612f90565b9082526020840135908082111561300557600080fd5b61301186838701612cec565b6020840152604085013591508082111561302a57600080fd5b5061303785828601612cec565b604083015250606083013560608201525092915050565b6000602080838503121561306157600080fd5b823567ffffffffffffffff8082111561307957600080fd5b908401906040828703121561308d57600080fd5b613095612c23565b8235828111156130a457600080fd5b8301601f810188136130b557600080fd5b80356130c3612d0b82612ca0565b81815260059190911b8201860190868101908a8311156130e257600080fd5b8784015b8381101561311a578035878111156130fe5760008081fd5b61310c8d8b83890101612fa5565b8452509188019188016130e6565b508452505050828401358281111561313157600080fd5b61313d88828601612d42565b948201949094529695505050505050565b600081518084526020808501808196508360051b8101915082860160005b858110156131db578284038952815160806001600160a01b03825116865286820151818888015261319f82880182612b19565b915050604080830151878303828901526131b98382612b19565b606094850151989094019790975250509885019893509084019060010161316c565b5091979650505050505050565b600081518084526020808501808196508360051b8101915082860160005b858110156131db57828403895261321e848351612b19565b98850198935090840190600101613206565b60208152600082516040602084015261324c606084018261314e565b90506020840151601f1984830301604085015261326982826131e8565b95945050505050565b60008060008060006060868803121561328a57600080fd5b853567ffffffffffffffff808211156132a257600080fd5b6132ae89838a01612e7a565b965060208801359150808211156132c457600080fd5b6132d089838a01612e92565b909650945060408801359150808211156132e957600080fd5b506132f688828901612b58565b969995985093965092949392505050565b60008060008060006060868803121561331f57600080fd5b853567ffffffffffffffff8082111561333757600080fd5b61334389838a01612b58565b9097509550602088013591508082111561335c57600080fd5b61336889838a01612b58565b9095509350604088013591508082111561338157600080fd5b5061338e88828901612d42565b9150509295509295909350565b6000602082840312156133ad57600080fd5b813567ffffffffffffffff8111156133c457600080fd5b6122f484828501612cec565b6000806000606084860312156133e557600080fd5b833567ffffffffffffffff808211156133fd57600080fd5b61340987838801612cec565b945060208601359350604086013591508082111561342657600080fd5b5061343386828701612d42565b9150509250925092565b6000815160a0845261345260a0850182612b19565b905060208301516020850152604083015160408501526001600160a01b0360608401511660608501526080830151151560808501528091505092915050565b6020815260006120ce602083018461343d565b600080604083850312156134b757600080fd5b823567ffffffffffffffff808211156134cf57600080fd5b6134db86838701612cec565b935060208501359150808211156134f157600080fd5b506134fe85828601612cec565b9150509250929050565b60006020828403121561351a57600080fd5b81356120ce81612f90565b600181811c9082168061353957607f821691505b602082108103612e8c57634e487b7160e01b600052602260045260246000fd5b803580151581146112f157600080fd5b60008060006060848603121561357e57600080fd5b833567ffffffffffffffff8082111561359657600080fd5b9085019060a082880312156135aa57600080fd5b6135b2612c4c565b8235828111156135c157600080fd5b6135cd89828601612cec565b825250602083013560208201526040830135604082015260608301356135f281612f90565b606082015261360360808401613559565b6080820152945061361660208701612ab4565b9350604086013591508082111561362c57600080fd5b5061343386828701612cec565b634e487b7160e01b600052603260045260246000fd5b600082601f83011261366057600080fd5b815161366e612d0b82612cc4565b81815284602083860101111561368357600080fd5b613694826020830160208701612af5565b949350505050565b6000602082840312156136ae57600080fd5b815167ffffffffffffffff8111156136c557600080fd5b6122f48482850161364f565b634e487b7160e01b600052601160045260246000fd5b6000600182016136f9576136f96136d1565b5060010190565b606081526000613713606083018661343d565b8281036020840152613725818661314e565b905082810360408401526137398185612b19565b9695505050505050565b600082601f83011261375457600080fd5b81516020613764612d0b83612ca0565b82815260059290921b8401810191818101908684111561378357600080fd5b8286015b84811015612dc257805167ffffffffffffffff8111156137a75760008081fd5b6137b58986838b010161364f565b845250918301918301613787565b6000602082840312156137d557600080fd5b815167ffffffffffffffff808211156137ed57600080fd5b908301906060828603121561380157600080fd5b60405160608101818110838211171561381c5761381c612c0d565b60405282518281111561382e57600080fd5b61383a8782860161364f565b8252506020830151602082015260408301518281111561385957600080fd5b61386587828601613743565b60408301525095945050505050565b60008235607e1983360301811261388a57600080fd5b9190910192915050565b60006103d63683612fa5565b6060815260006138b36060830186612b19565b82810360208401526138c58186612b19565b9150506001600160a01b0383166040830152949350505050565b6000815160208301516001600160e01b0319808216935060048310156126175760049290920360031b82901b161692915050565b60006020828403121561392557600080fd5b6120ce82613559565b6000808335601e1984360301811261394557600080fd5b83018035915067ffffffffffffffff82111561396057600080fd5b602001915036819003821315612b9a57600080fd5b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156139ca57603f198886030184526139b8858351612b19565b9450928501929085019060010161399c565b5092979650505050505050565b6001600160e01b031981358181169160048510156139ff5780818660040360031b1b83161692505b505092915050565b60008085851115613a1757600080fd5b83861115613a2457600080fd5b5050820193919092039150565b600082601f830112613a4257600080fd5b81356020613a52612d0b83612ca0565b82815260059290921b84018101918181019086841115613a7157600080fd5b8286015b84811015612dc257803567ffffffffffffffff811115613a955760008081fd5b613aa38986838b0101612cec565b845250918301918301613a75565b600060208284031215613ac357600080fd5b813567ffffffffffffffff811115613ada57600080fd5b6122f484828501613a31565b60008060408385031215613af957600080fd5b823567ffffffffffffffff80821115613b1157600080fd5b818501915085601f830112613b2557600080fd5b81356020613b35612d0b83612ca0565b82815260059290921b84018101918181019089841115613b5457600080fd5b948201945b83861015613b7957613b6a86613559565b82529482019490820190613b59565b96505086013592505080821115613b8f57600080fd5b506134fe85828601613a31565b604081526000613baf6040830185612b19565b82810360208401526132698185612b19565b6000825161388a818460208701612af5565b602081526000825160606020840152613bef6080840182612b19565b9050602084015160408401526040840151601f1984830301606085015261326982826131e8565b600080600060608486031215613c2b57600080fd5b833567ffffffffffffffff80821115613c4357600080fd5b613c4f87838801612cec565b94506020860135915080821115613c6557600080fd5b50613c7286828701612cec565b9250506040840135613c8381612f90565b809150509250925092565b600060208284031215613ca057600080fd5b81516120ce81612f90565b80516112f181612a9e565b600060208284031215613cc857600080fd5b815167ffffffffffffffff80821115613ce057600080fd5b9083019060a08286031215613cf457600080fd5b613cfc612c4c565b8251613d0781612f90565b81526020830151613d1781612a9e565b6020820152604083015182811115613d2e57600080fd5b613d3a8782860161364f565b604083015250613d4c60608401613cab565b6060820152608083015182811115613d6357600080fd5b613d6f8782860161364f565b60808301525095945050505050565b606081526000613d91606083018661343d565b6001600160e01b03198516602084015282810360408401526137398185612b19565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015613e3f57603f19898403018552815160606001600160a01b03825116855288820151818a870152613e11828701826131e8565b91505087820151915084810388860152613e2b8183612b19565b968901969450505090860190600101613dda565b509098975050505050505050565b6001600160a01b038616815260a060208201526000613e6f60a08301876131e8565b8281036040840152613e818187612b19565b90506001600160e01b0319851660608401528281036080840152613ea58185612b19565b98975050505050505050565b818103818111156103d6576103d66136d1565b60008351613ed6818460208801612af5565b601760f91b9083019081528351613ef4816001840160208801612af5565b7f2e7265766572736500000000000000000000000000000000000000000000000060019290910191820152600901949350505050565b602081526001600160a01b038251166020820152600060208301516001600160e01b031980821660408501526040850151915060a06060850152613f7160c0850183612b19565b9150806060860151166080850152506080840151601f198483030160a08501526132698282612b19565b808201808211156103d6576103d66136d1565b600080600080600060a08688031215613fc657600080fd5b8551613fd181612f90565b602087015190955067ffffffffffffffff80821115613fef57600080fd5b613ffb89838a01613743565b9550604088015191508082111561401157600080fd5b61401d89838a0161364f565b94506060880151915061402f82612a9e565b60808801519193508082111561404457600080fd5b5061338e8882890161364f565b634e487b7160e01b600052601260045260246000fd5b60008261407657614076614051565b500690565b60008261408a5761408a614051565b500490565b601f82111561151257600081815260208120601f850160051c810160208610156140b65750805b601f850160051c820191505b81811015611aea578281556001016140c2565b815167ffffffffffffffff8111156140ef576140ef612c0d565b614103816140fd8454613525565b8461408f565b602080601f83116001811461413857600084156141205750858301515b600019600386901b1c1916600185901b178555611aea565b600085815260208120601f198616915b8281101561416757888601518255948401946001909101908401614148565b50858210156141855787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220d1edf3d8478d77f0b72688b3aff726580dc3285c7c6e9442da740a49fecce6ee64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "DNSDecodingFailed(bytes)": [
        {
          "details": "The DNS-encoded name is malformed."
        }
      ],
      "DNSEncodingFailed(string)": [
        {
          "details": "A label of the ENS name has an invalid size."
        }
      ],
      "EmptyAddress()": [
        {
          "details": "The supplied address was `0x`."
        }
      ],
      "HttpError(uint16,string)": [
        {
          "details": "Error selector: `0x01800152`"
        }
      ],
      "InvalidBatchGatewayResponse()": [
        {
          "details": "The batch gateway supplied an incorrect number of responses."
        }
      ],
      "OffchainLookup(address,string[],bytes,bytes4,bytes)": [
        {
          "details": "https://eips.ethereum.org/EIPS/eip-3668 Error selector: `0x556f1830`"
        }
      ],
      "ResolverError(bytes)": [
        {
          "details": "Error selector: `0x95c0c752`"
        }
      ],
      "ResolverNotContract(bytes,address)": [
        {
          "details": "Error selector: `0x1e9535f2`"
        }
      ],
      "ResolverNotFound(bytes)": [
        {
          "details": "Error selector: `0x77209fe8`"
        }
      ],
      "ReverseAddressMismatch(string,bytes)": [
        {
          "details": "Error selector: `0xef9c03ce`"
        }
      ],
      "UnsupportedResolverProfile(bytes4)": [
        {
          "details": "Error selector: `0x7b1c461b`"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "ccipBatch(((address,bytes,bytes,uint256)[],string[]))": {
        "details": "Use `CCIPReader.ccipRead()` to call this function with a batch.      The callback `response` will be `abi.encode(batch)`."
      },
      "ccipBatchCallback(bytes,bytes)": {
        "details": "CCIP-Read callback for `ccipBatch()`.      Updates `batch` using the batch gateway response. Reverts again if not \"done\".",
        "params": {
          "extraData": "The contextual data passed from `ccipBatch()`.",
          "response": "The response from the batch gateway."
        },
        "returns": {
          "batch": "The batch where every lookup is \"done\"."
        }
      },
      "ccipReadCallback(bytes,bytes)": {
        "details": "CCIP-Read callback for `ccipRead()`.The return type of this function is polymorphic depending on the caller.",
        "params": {
          "extraData": "The contextual data passed from `ccipRead()`.",
          "response": "The response from offchain."
        }
      },
      "findResolver(bytes)": {
        "details": "Find the resolver address for `name`.      Does not perform any validity checks.",
        "params": {
          "name": "The name to search."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "requireResolver(bytes)": {
        "details": "Returns a valid resolver for `name` or reverts.",
        "params": {
          "name": "The name to search."
        },
        "returns": {
          "info": "The resolver information."
        }
      },
      "resolveBatchCallback(bytes,bytes)": {
        "details": "CCIP-Read callback for `_resolveBatch()`.",
        "params": {
          "extraData": "The contextual data from `_resolveBatch()`.",
          "response": "The response data from `CCIPBatcher`."
        }
      },
      "resolveCallback((bytes,uint256,bytes32,address,bool),(address,bytes,bytes,uint256)[],bytes)": {
        "details": "CCIP-Read callback for `resolveWithGateways()` (step 2 of 2).",
        "params": {
          "extraData": "The contextual data passed from `resolveWithGateways()`.",
          "info": "The resolver that was called.",
          "lookups": "The lookups corresponding to the requested call."
        },
        "returns": {
          "resolver": "The address of the resolver that supplied `result`.",
          "result": "The encoded response for the requested call."
        }
      },
      "resolveWithGateways(bytes,bytes,string[])": {
        "details": "This function executes over multiple steps (step 1 of 2).",
        "returns": {
          "_0": "result The encoded response for the requested call.",
          "_1": "resolver The address of the resolver that supplied `result`."
        }
      },
      "reverseAddressCallback((bytes,uint256,bytes32,address,bool),(address,bytes,bytes,uint256)[],bytes)": {
        "details": "CCIP-Read callback for `reverseNameCallback()` (step 3 of 3).      Reverts `ReverseAddressMismatch`.",
        "params": {
          "extraData": "The contextual data passed from `reverseNameCallback()`.",
          "info": "The resolver for the primary name that was called.",
          "lookups": "The lookups corresponding to the calls: `[addr()]`."
        },
        "returns": {
          "primary": "The resolved primary name.",
          "resolver": "The resolver address for primary name.",
          "reverseResolver": "The resolver address for the reverse name."
        }
      },
      "reverseNameCallback((bytes,uint256,bytes32,address,bool),(address,bytes,bytes,uint256)[],bytes)": {
        "details": "CCIP-Read callback for `reverseWithGateways()` (step 2 of 3).",
        "params": {
          "extraData": "The contextual data passed from `reverseWithGateways()`.",
          "infoRev": "The resolver for the reverse name that was called.",
          "lookups": "The lookups corresponding to the calls: `[name()]`."
        }
      },
      "reverseWithGateways(bytes,uint256,string[])": {
        "details": "This function executes over multiple steps (step 1 of 3).",
        "params": {
          "coinType": "The coin type.",
          "encodedAddress": "The input address.",
          "gateways": "The list of batch gateway URLs to use."
        }
      },
      "setBatchGateways(string[])": {
        "details": "Set the default batch gateways, see: `resolve()` and `reverse()`.",
        "params": {
          "gateways": "The list of batch gateway URLs to use as default."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "HttpError(uint16,string)": [
        {
          "notice": "An HTTP error occurred on a resolving gateway."
        }
      ],
      "ResolverError(bytes)": [
        {
          "notice": "The resolver returned an error."
        }
      ],
      "ResolverNotContract(bytes,address)": [
        {
          "notice": "The resolver is not a contract."
        }
      ],
      "ResolverNotFound(bytes)": [
        {
          "notice": "A resolver could not be found for the supplied name."
        }
      ],
      "ReverseAddressMismatch(string,bytes)": [
        {
          "notice": "The resolved address from reverse resolution does not match the supplied address."
        }
      ],
      "UnsupportedResolverProfile(bytes4)": [
        {
          "notice": "The resolver did not respond."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "resolve(bytes,bytes)": {
        "notice": "Same as `resolveWithGateways()` but uses default batch gateways."
      },
      "resolveWithGateways(bytes,bytes,string[])": {
        "notice": "Performs ENS name resolution for the supplied name and resolution data.Callers should enable EIP-3668."
      },
      "reverse(bytes,uint256)": {
        "notice": "Same as `reverseWithGateways()` but uses default batch gateways."
      },
      "reverseWithGateways(bytes,uint256,string[])": {
        "notice": "Performs ENS reverse resolution for the supplied address and coin type.Callers should enable EIP-3668."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 444,
        "contract": "contracts/universalResolver/UniversalResolver.sol:UniversalResolver",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 21408,
        "contract": "contracts/universalResolver/UniversalResolver.sol:UniversalResolver",
        "label": "batchGateways",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}